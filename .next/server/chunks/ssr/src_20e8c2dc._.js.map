{"version":3,"sources":["turbopack:///[project]/node_modules/date-fns/_lib/getRoundingMethod.js","turbopack:///[project]/node_modules/date-fns/differenceInMinutes.js","turbopack:///[project]/node_modules/date-fns/differenceInMilliseconds.js","turbopack:///[project]/node_modules/date-fns/differenceInHours.js","turbopack:///[project]/node_modules/date-fns/differenceInDays.js","turbopack:///[project]/src/utils.ts","turbopack:///[project]/src/components/ContactList.tsx","turbopack:///[project]/src/app/(routes)/inbox/@contactList/default.tsx"],"sourcesContent":["export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { millisecondsInMinute } from \"./constants.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\n\n/**\n * The {@link differenceInDays} function options.\n */\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nexport function differenceInDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarDays(laterDate_, earlierDate_),\n  );\n\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(laterDate_, earlierDate_) === -sign,\n  );\n\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(laterDate, earlierDate) {\n  const diff =\n    laterDate.getFullYear() - earlierDate.getFullYear() ||\n    laterDate.getMonth() - earlierDate.getMonth() ||\n    laterDate.getDate() - earlierDate.getDate() ||\n    laterDate.getHours() - earlierDate.getHours() ||\n    laterDate.getMinutes() - earlierDate.getMinutes() ||\n    laterDate.getSeconds() - earlierDate.getSeconds() ||\n    laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n\n  if (diff < 0) return -1;\n  if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInDays;\n","import { differenceInMinutes, differenceInHours, differenceInDays } from \"date-fns\";\n\nexport function shortTimeAgo(date: Date) {\n  const now = new Date();\n\n  const minutes = differenceInMinutes(now, date);\n  const hours = differenceInHours(now, date);\n  const days = differenceInDays(now, date);\n\n  if (days > 0) return `${days}d`;\n  if (hours > 0) return `${hours}h`;\n  if (minutes > 0) return `${minutes}m`;\n\n  return \"just now\";\n}\n","import { shortTimeAgo } from \"@/utils\";\nimport { Message, Profile } from \"@prisma/client\";\nimport Link from \"next/link\";\n\nexport default function ContactList({\n  profiles,\n  lastMessages,\n}: {\n  profiles: Profile[];\n  lastMessages: { contactId: string; message: Message | null }[];\n}) {\n  return (\n    <div>\n      <h1 className=\"text-2xl font-bold mb-4\">Messages</h1>\n      {profiles.map((profile) => {\n        const lastMessageObj = lastMessages.find(\n          (lm) => lm.contactId === profile.id\n        );\n        const lastMessage = lastMessageObj?.message;\n\n        return (\n          <Link key={profile.id} href={`/inbox/${profile.id}`}>\n            <div className=\"p-4 border-b border-gray-300 hover:bg-gray-100 cursor-pointer\">\n              <div className=\"flex items-center gap-4\">\n                <img\n                  src={profile.avatar || \"\"}\n                  alt=\"\"\n                  className=\"w-12 h-12 rounded-full\"\n                />\n                <div className=\"flex flex-col\">\n                  <span className=\"font-medium\">{profile.username}</span>\n                  {lastMessage && (\n                    <div className=\"flex gap-1 text-sm text-gray-600\">\n                      <span className=\"truncate max-w-[200px]\">\n                        {lastMessage.content}\n                      </span>\n                      <span>â€¢</span>\n                      <span>{shortTimeAgo(lastMessage.createdAt)}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n","import { auth } from \"@/auth\";\nimport ContactList from \"@/components/ContactList\";\nimport { prisma } from \"@/db\";\nexport default async function DefaultContactListPage() {\n    const session = await auth();\n    if (!session?.user?.email) {\n        return <div>Please log in.</div>;\n    }\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where:{email:session?.user?.email as string}\n    })\n    const messages = await prisma.message.findMany({\n        where: {\n        OR: [\n            { senderId: sessionProfile.id },\n            { receiverId: sessionProfile.id },\n        ],\n        },\n    });\n    const contactIds = messages.map((m) =>\n        m.receiverId === sessionProfile.id ? m.senderId : m.receiverId\n    );\n\n    const uniqueContactIds = [...new Set(contactIds)];\n\n    const profiles = await prisma.profile.findMany({\n        where: {\n        id: { in: uniqueContactIds },\n        },\n    });\n\n    const lastMessages = await Promise.all(\n        uniqueContactIds.map(async (contactId) => {\n            const message = await prisma.message.findFirst({\n            where: {\n                OR: [\n                { senderId: sessionProfile.id, receiverId: contactId },\n                { senderId: contactId, receiverId: sessionProfile.id },\n                ],\n            },\n            orderBy: {\n                createdAt: 'desc',\n            },\n            });\n            return { contactId, message };\n        })\n    );\n    \n    return (\n        <ContactList profiles={profiles} lastMessages={lastMessages}/>\n    );\n}"],"names":[],"mappings":"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","ignoreList":[0,1,2,3,4]}