{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/components/Preloader.tsx"],"sourcesContent":["'use client'\nimport { ScaleLoader } from \"react-spinners\";\n\nexport default function Preloader() {\n    return (\n        <>\n            <ScaleLoader speedMultiplier={3}/>\n        </>\n    )\n}"],"names":[],"mappings":";;;;;AACA;AADA;;;AAGe,SAAS;IACpB,qBACI;kBACI,cAAA,8OAAC,gNAAW;YAAC,iBAAiB;;;;;;;AAG1C","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,sKAAO,EAAC,IAAA,6IAAI,EAAC;AACtB","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAEA;AANA;;;;;AAQA,SAAS,OAAO,EACd,GAAG,OAC+C;IAClD,qBAAO,8OAAC,0KAAoB;QAAC,aAAU;QAAU,GAAG,KAAK;;;;;;AAC3D;AAEA,SAAS,cAAc,EACrB,GAAG,OACkD;IACrD,qBAAO,8OAAC,6KAAuB;QAAC,aAAU;QAAkB,GAAG,KAAK;;;;;;AACtE;AAEA,SAAS,aAAa,EACpB,GAAG,OACiD;IACpD,qBAAO,8OAAC,4KAAsB;QAAC,aAAU;QAAiB,GAAG,KAAK;;;;;;AACpE;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,8OAAC,2KAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,GAAG,OACkD;IACrD,qBACE,8OAAC,6KAAuB;QACtB,aAAU;QACV,WAAW,IAAA,yHAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,QAAQ,EACR,kBAAkB,IAAI,EACtB,GAAG,OAGJ;IACC,qBACE,8OAAC;QAAa,aAAU;;0BACtB,8OAAC;;;;;0BACD,8OAAC,6KAAuB;gBACtB,aAAU;gBACV,WAAW,IAAA,yHAAE,EACX,+WACA;gBAED,GAAG,KAAK;;oBAER;oBACA,iCACC,8OAAC,2KAAqB;wBACpB,aAAU;wBACV,WAAU;;0CAEV,8OAAC,yMAAK;;;;;0CACN,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAMtC;AAEA,SAAS,aAAa,EAAE,SAAS,EAAE,GAAG,OAAoC;IACxE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EAAC,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,aAAa,EAAE,SAAS,EAAE,GAAG,OAAoC;IACxE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EACX,0DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,2KAAqB;QACpB,aAAU;QACV,WAAW,IAAA,yHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACsD;IACzD,qBACE,8OAAC,iLAA2B;QAC1B,aAAU;QACV,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/actions.ts"],"sourcesContent":["'use server';\n\nimport { uniq } from \"lodash\";\nimport { auth } from \"./auth\";\nimport { prisma } from \"./db\";\n\nexport async function getSessionEmail(): Promise<string|null|undefined> {\n    const session = await auth();\n    return session?.user?.email;\n}\n\nexport async function getSessionEmailOrThrow(): Promise<string> {\n    const userEmail = await getSessionEmail();\n    if (!userEmail) {\n        throw 'not logged in';\n    }\n    return userEmail;\n}\n\nexport async function updateProfile(data: FormData){\n    const userEmail = await getSessionEmailOrThrow();\n    const newUserInfo = {\n        username: data.get('username') as string,\n        name: data.get('name') as string,\n        subtitle: data.get('subtitle') as string,\n        bio: data.get('bio') as string,\n        avatar: data.get('avatar') as string,\n    };\n    await prisma.profile.upsert({\n        where: {\n            email: userEmail,\n        },\n        update: newUserInfo,\n        create: {\n            email: userEmail,\n            ...newUserInfo,\n        },\n    });\n}\n\nexport async function postEntry(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const postDoc = await prisma.post.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            description: data.get('description') as string || '',\n        }\n    })\n    return postDoc.id;\n}\n\nexport async function postComment(data: FormData) {\n    const authorEmail = await getSessionEmailOrThrow();\n    return prisma.comment.create({\n        data: {\n            author: authorEmail,\n            postId: data.get('postId') as string,\n            text: data.get('text') as string,\n        }\n    })\n}\n\nasync function updatePostLikesCount(postId: string) {\n    await prisma.post.update({\n        where: {id:postId},\n        data: {\n            likesCount: await prisma.like.count({where:{postId}}),\n        }\n    })\n}\n\nexport async function likePost(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.create({\n        data: {\n            author: await getSessionEmailOrThrow(),\n            postId,\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function removeLike(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.deleteMany({\n        where: {\n            postId,\n            author: await getSessionEmailOrThrow(),\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function getSinglePostData(postId: string) {\n    const post = await prisma.post.findFirstOrThrow({where:{id:postId}})\n    const authorProfile = await prisma.profile.findFirstOrThrow({where:{email:post.author}})\n    const comments = await prisma.comment.findMany({where:{postId:post.id}})\n    const commentsAuthors = await prisma.profile.findMany({\n        where: {\n            email: {in: uniq(comments.map(c => c.author))}\n        }\n    })\n    const myLike = await prisma.like.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    const myBookmark = await prisma.bookmark.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    return {\n        post,\n        authorProfile,\n        comments,\n        commentsAuthors,\n        myLike,\n        myBookmark\n    }\n}\n\nexport async function followProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.create({\n        data: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n            followedProfileId: profileIdToFollow,\n        }\n    })\n}\n\nexport async function unfollowProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.deleteMany({\n        where: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n        }\n    })\n}\n\nexport async function bookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.create({\n        data: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function unbookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.deleteMany({\n        where: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function sendMessage(receiverId: string, data: FormData) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    return prisma.message.create({\n        data: {\n            senderId: sessionProfile.id,\n            receiverId: receiverId,\n            content: data.get('text') as string,\n        }\n    })\n}\n\nexport async function postStory(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const storyDoc = await prisma.story.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            caption: data.get('caption') as string || '',\n        }\n    })\n    return storyDoc.id;\n}"],"names":[],"mappings":";;;;;;;IA6LsB,YAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n        \"icon-sm\": \"size-8\",\n        \"icon-lg\": \"size-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,IAAA,uKAAG,EACxB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;YACN,WAAW;YACX,WAAW;QACb;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,wKAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/components/NewStoryForm.tsx"],"sourcesContent":["'use client';\nimport { postStory } from \"@/actions\";\nimport { TextArea } from \"@radix-ui/themes\";\nimport { Button } from \"@/components/ui/button\"\nimport { CloudUploadIcon } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { DialogClose } from \"@/components/ui/dialog\"\n\nexport default function NewStoryForm() {\n    const [imageUrl, setImageUrl] = useState('');\n        const [file, setFile] = useState<File|null>(null);\n        const [isUploading, setIsUploading] = useState(false);\n        const fileInRef = useRef<HTMLInputElement>(null);\n        const router = useRouter();\n        useEffect(() => {\n            if (file) {\n                setIsUploading(true);\n                const data = new FormData();\n                data.set(\"file\", file);\n                fetch(\"/api/upload\", {\n                    method: \"POST\",\n                    body: data,\n                }).then(response => {\n                    response.json().then(url => {\n                        setImageUrl(url);\n                        setIsUploading(false);\n                    });\n                });\n            }\n        }, [file]);\n    return (\n         <form \n        className=\"max-w-md mx-auto\"\n        action={async data => {\n            const id = await postStory(data);\n            router.push(`/`);\n            router.refresh(); \n        }}>\n            <input type=\"hidden\" name=\"image\" value={imageUrl} />\n            <div className=\"flex flex-col gap-4\">\n                <div>\n                    <div className=\"min-h-64 p-2 bg-gray-400 rounded-md relative\">\n                        {imageUrl && (\n                            <img src={imageUrl} className=\"rounded-md\" alt=\"\" />\n                        )}\n                        <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <input\n                            onChange={ev => setFile(ev.target.files?.[0] || null)} \n                            className=\"hidden\"\n                            type=\"file\" \n                            ref={fileInRef} />\n                            <Button\n                            disabled={isUploading} \n                            onClick={() => fileInRef?.current?.click()}\n                            type=\"button\" variant=\"ghost\">\n                                {!isUploading && (\n                                    <CloudUploadIcon size={16} />\n                                )}\n                                {isUploading ? 'Uploading...' : 'Choose image'}\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"flex flex-col gap-2\">\n                    <TextArea name=\"caption\" className=\"h-16\" placeholder=\"Add a caption...\" />\n                </div>\n                <DialogClose asChild>\n                    <Button type=\"submit\" variant=\"outline\" className=\"mx-auto\">Publish</Button>\n                </DialogClose>\n            </div>\n        </form>\n    )\n}"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;AASe,SAAS;IACpB,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,iNAAQ,EAAC;IACrC,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAY;IAC5C,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,iNAAQ,EAAC;IAC/C,MAAM,YAAY,IAAA,+MAAM,EAAmB;IAC3C,MAAM,SAAS,IAAA,+IAAS;IACxB,IAAA,kNAAS,EAAC;QACN,IAAI,MAAM;YACN,eAAe;YACf,MAAM,OAAO,IAAI;YACjB,KAAK,GAAG,CAAC,QAAQ;YACjB,MAAM,eAAe;gBACjB,QAAQ;gBACR,MAAM;YACV,GAAG,IAAI,CAAC,CAAA;gBACJ,SAAS,IAAI,GAAG,IAAI,CAAC,CAAA;oBACjB,YAAY;oBACZ,eAAe;gBACnB;YACJ;QACJ;IACJ,GAAG;QAAC;KAAK;IACb,qBACK,8OAAC;QACF,WAAU;QACV,QAAQ,OAAM;YACV,MAAM,KAAK,MAAM,IAAA,wJAAS,EAAC;YAC3B,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;YACf,OAAO,OAAO;QAClB;;0BACI,8OAAC;gBAAM,MAAK;gBAAS,MAAK;gBAAQ,OAAO;;;;;;0BACzC,8OAAC;gBAAI,WAAU;;kCACX,8OAAC;kCACG,cAAA,8OAAC;4BAAI,WAAU;;gCACV,0BACG,8OAAC;oCAAI,KAAK;oCAAU,WAAU;oCAAa,KAAI;;;;;;8CAEnD,8OAAC;oCAAI,WAAU;;sDACX,8OAAC;4CACD,UAAU,CAAA,KAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI;4CAChD,WAAU;4CACV,MAAK;4CACL,KAAK;;;;;;sDACL,8OAAC,4IAAM;4CACP,UAAU;4CACV,SAAS,IAAM,WAAW,SAAS;4CACnC,MAAK;4CAAS,SAAQ;;gDACjB,CAAC,6BACE,8OAAC,2OAAe;oDAAC,MAAM;;;;;;gDAE1B,cAAc,iBAAiB;;;;;;;;;;;;;;;;;;;;;;;;kCAKhD,8OAAC;wBAAI,WAAU;kCACX,cAAA,8OAAC,gMAAQ;4BAAC,MAAK;4BAAU,WAAU;4BAAO,aAAY;;;;;;;;;;;kCAE1D,8OAAC,iJAAW;wBAAC,OAAO;kCAChB,cAAA,8OAAC,4IAAM;4BAAC,MAAK;4BAAS,SAAQ;4BAAU,WAAU;sCAAU;;;;;;;;;;;;;;;;;;;;;;;AAKhF","debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/components/ui/carousel.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = \"horizontal\",\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    },\n    plugins\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === \"ArrowLeft\") {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === \"ArrowRight\") {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext]\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -left-12 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = \"outline\",\n  size = \"icon\",\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute size-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"top-1/2 -right-12 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 692, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/actions.ts"],"sourcesContent":["'use server';\n\nimport { uniq } from \"lodash\";\nimport { auth } from \"./auth\";\nimport { prisma } from \"./db\";\n\nexport async function getSessionEmail(): Promise<string|null|undefined> {\n    const session = await auth();\n    return session?.user?.email;\n}\n\nexport async function getSessionEmailOrThrow(): Promise<string> {\n    const userEmail = await getSessionEmail();\n    if (!userEmail) {\n        throw 'not logged in';\n    }\n    return userEmail;\n}\n\nexport async function updateProfile(data: FormData){\n    const userEmail = await getSessionEmailOrThrow();\n    const newUserInfo = {\n        username: data.get('username') as string,\n        name: data.get('name') as string,\n        subtitle: data.get('subtitle') as string,\n        bio: data.get('bio') as string,\n        avatar: data.get('avatar') as string,\n    };\n    await prisma.profile.upsert({\n        where: {\n            email: userEmail,\n        },\n        update: newUserInfo,\n        create: {\n            email: userEmail,\n            ...newUserInfo,\n        },\n    });\n}\n\nexport async function postEntry(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const postDoc = await prisma.post.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            description: data.get('description') as string || '',\n        }\n    })\n    return postDoc.id;\n}\n\nexport async function postComment(data: FormData) {\n    const authorEmail = await getSessionEmailOrThrow();\n    return prisma.comment.create({\n        data: {\n            author: authorEmail,\n            postId: data.get('postId') as string,\n            text: data.get('text') as string,\n        }\n    })\n}\n\nasync function updatePostLikesCount(postId: string) {\n    await prisma.post.update({\n        where: {id:postId},\n        data: {\n            likesCount: await prisma.like.count({where:{postId}}),\n        }\n    })\n}\n\nexport async function likePost(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.create({\n        data: {\n            author: await getSessionEmailOrThrow(),\n            postId,\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function removeLike(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.deleteMany({\n        where: {\n            postId,\n            author: await getSessionEmailOrThrow(),\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function getSinglePostData(postId: string) {\n    const post = await prisma.post.findFirstOrThrow({where:{id:postId}})\n    const authorProfile = await prisma.profile.findFirstOrThrow({where:{email:post.author}})\n    const comments = await prisma.comment.findMany({where:{postId:post.id}})\n    const commentsAuthors = await prisma.profile.findMany({\n        where: {\n            email: {in: uniq(comments.map(c => c.author))}\n        }\n    })\n    const myLike = await prisma.like.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    const myBookmark = await prisma.bookmark.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    return {\n        post,\n        authorProfile,\n        comments,\n        commentsAuthors,\n        myLike,\n        myBookmark\n    }\n}\n\nexport async function followProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.create({\n        data: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n            followedProfileId: profileIdToFollow,\n        }\n    })\n}\n\nexport async function unfollowProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.deleteMany({\n        where: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n        }\n    })\n}\n\nexport async function bookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.create({\n        data: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function unbookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.deleteMany({\n        where: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function sendMessage(receiverId: string, data: FormData) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    return prisma.message.create({\n        data: {\n            senderId: sessionProfile.id,\n            receiverId: receiverId,\n            content: data.get('text') as string,\n        }\n    })\n}\n\nexport async function postStory(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const storyDoc = await prisma.story.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            caption: data.get('caption') as string || '',\n        }\n    })\n    return storyDoc.id;\n}"],"names":[],"mappings":";;;;;;;IAwEsB,WAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 704, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/actions.ts"],"sourcesContent":["'use server';\n\nimport { uniq } from \"lodash\";\nimport { auth } from \"./auth\";\nimport { prisma } from \"./db\";\n\nexport async function getSessionEmail(): Promise<string|null|undefined> {\n    const session = await auth();\n    return session?.user?.email;\n}\n\nexport async function getSessionEmailOrThrow(): Promise<string> {\n    const userEmail = await getSessionEmail();\n    if (!userEmail) {\n        throw 'not logged in';\n    }\n    return userEmail;\n}\n\nexport async function updateProfile(data: FormData){\n    const userEmail = await getSessionEmailOrThrow();\n    const newUserInfo = {\n        username: data.get('username') as string,\n        name: data.get('name') as string,\n        subtitle: data.get('subtitle') as string,\n        bio: data.get('bio') as string,\n        avatar: data.get('avatar') as string,\n    };\n    await prisma.profile.upsert({\n        where: {\n            email: userEmail,\n        },\n        update: newUserInfo,\n        create: {\n            email: userEmail,\n            ...newUserInfo,\n        },\n    });\n}\n\nexport async function postEntry(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const postDoc = await prisma.post.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            description: data.get('description') as string || '',\n        }\n    })\n    return postDoc.id;\n}\n\nexport async function postComment(data: FormData) {\n    const authorEmail = await getSessionEmailOrThrow();\n    return prisma.comment.create({\n        data: {\n            author: authorEmail,\n            postId: data.get('postId') as string,\n            text: data.get('text') as string,\n        }\n    })\n}\n\nasync function updatePostLikesCount(postId: string) {\n    await prisma.post.update({\n        where: {id:postId},\n        data: {\n            likesCount: await prisma.like.count({where:{postId}}),\n        }\n    })\n}\n\nexport async function likePost(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.create({\n        data: {\n            author: await getSessionEmailOrThrow(),\n            postId,\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function removeLike(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.deleteMany({\n        where: {\n            postId,\n            author: await getSessionEmailOrThrow(),\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function getSinglePostData(postId: string) {\n    const post = await prisma.post.findFirstOrThrow({where:{id:postId}})\n    const authorProfile = await prisma.profile.findFirstOrThrow({where:{email:post.author}})\n    const comments = await prisma.comment.findMany({where:{postId:post.id}})\n    const commentsAuthors = await prisma.profile.findMany({\n        where: {\n            email: {in: uniq(comments.map(c => c.author))}\n        }\n    })\n    const myLike = await prisma.like.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    const myBookmark = await prisma.bookmark.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    return {\n        post,\n        authorProfile,\n        comments,\n        commentsAuthors,\n        myLike,\n        myBookmark\n    }\n}\n\nexport async function followProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.create({\n        data: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n            followedProfileId: profileIdToFollow,\n        }\n    })\n}\n\nexport async function unfollowProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.deleteMany({\n        where: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n        }\n    })\n}\n\nexport async function bookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.create({\n        data: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function unbookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.deleteMany({\n        where: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function sendMessage(receiverId: string, data: FormData) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    return prisma.message.create({\n        data: {\n            senderId: sessionProfile.id,\n            receiverId: receiverId,\n            content: data.get('text') as string,\n        }\n    })\n}\n\nexport async function postStory(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const storyDoc = await prisma.story.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            caption: data.get('caption') as string || '',\n        }\n    })\n    return storyDoc.id;\n}"],"names":[],"mappings":";;;;;;;IAmFsB,aAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 716, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/components/LikesInfo.tsx"],"sourcesContent":["'use client'\nimport { likePost, removeLike } from \"@/actions\";\nimport { Like, Post } from \"@prisma/client\";\nimport { HeartIcon } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\n\nexport default function LikesInfo({\n    post, \n    sessionLike,\n    showText=true\n}:{\n    post:Post, \n    sessionLike:Like | null,\n    showText?:boolean\n}) {\n    const router = useRouter();\n    const [likedByMe, setLikedByMe] = useState(!!sessionLike); \n    return (\n        <form \n        action={async (data:FormData) => {\n            setLikedByMe(prev => !prev);\n            if (likedByMe) {\n                await removeLike(data);\n            } else {\n                await likePost(data);\n            }\n            router.refresh();\n        }}\n        className=\"flex items-center gap-2\">\n            <input type=\"hidden\" name=\"postId\" value={post.id}/>\n            <button \n            type=\"submit\" \n            className=\"cursor-pointer\">\n                <HeartIcon className={likedByMe ? 'text-red-500 fill-red-500' : 'text-gray-700'} /> \n            </button>\n            {showText && (\n                <p>{post.likesCount} people like this</p>\n            )}\n        </form>\n    )\n}"],"names":[],"mappings":";;;;;AACA;AAAA;AAEA;AACA;AACA;AALA;;;;;;AAOe,SAAS,UAAU,EAC9B,IAAI,EACJ,WAAW,EACX,WAAS,IAAI,EAKhB;IACG,MAAM,SAAS,IAAA,+IAAS;IACxB,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC,CAAC,CAAC;IAC7C,qBACI,8OAAC;QACD,QAAQ,OAAO;YACX,aAAa,CAAA,OAAQ,CAAC;YACtB,IAAI,WAAW;gBACX,MAAM,IAAA,yJAAU,EAAC;YACrB,OAAO;gBACH,MAAM,IAAA,uJAAQ,EAAC;YACnB;YACA,OAAO,OAAO;QAClB;QACA,WAAU;;0BACN,8OAAC;gBAAM,MAAK;gBAAS,MAAK;gBAAS,OAAO,KAAK,EAAE;;;;;;0BACjD,8OAAC;gBACD,MAAK;gBACL,WAAU;0BACN,cAAA,8OAAC,qNAAS;oBAAC,WAAW,YAAY,8BAA8B;;;;;;;;;;;YAEnE,0BACG,8OAAC;;oBAAG,KAAK,UAAU;oBAAC;;;;;;;;;;;;;AAIpC","debugId":null}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/actions.ts"],"sourcesContent":["'use server';\n\nimport { uniq } from \"lodash\";\nimport { auth } from \"./auth\";\nimport { prisma } from \"./db\";\n\nexport async function getSessionEmail(): Promise<string|null|undefined> {\n    const session = await auth();\n    return session?.user?.email;\n}\n\nexport async function getSessionEmailOrThrow(): Promise<string> {\n    const userEmail = await getSessionEmail();\n    if (!userEmail) {\n        throw 'not logged in';\n    }\n    return userEmail;\n}\n\nexport async function updateProfile(data: FormData){\n    const userEmail = await getSessionEmailOrThrow();\n    const newUserInfo = {\n        username: data.get('username') as string,\n        name: data.get('name') as string,\n        subtitle: data.get('subtitle') as string,\n        bio: data.get('bio') as string,\n        avatar: data.get('avatar') as string,\n    };\n    await prisma.profile.upsert({\n        where: {\n            email: userEmail,\n        },\n        update: newUserInfo,\n        create: {\n            email: userEmail,\n            ...newUserInfo,\n        },\n    });\n}\n\nexport async function postEntry(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const postDoc = await prisma.post.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            description: data.get('description') as string || '',\n        }\n    })\n    return postDoc.id;\n}\n\nexport async function postComment(data: FormData) {\n    const authorEmail = await getSessionEmailOrThrow();\n    return prisma.comment.create({\n        data: {\n            author: authorEmail,\n            postId: data.get('postId') as string,\n            text: data.get('text') as string,\n        }\n    })\n}\n\nasync function updatePostLikesCount(postId: string) {\n    await prisma.post.update({\n        where: {id:postId},\n        data: {\n            likesCount: await prisma.like.count({where:{postId}}),\n        }\n    })\n}\n\nexport async function likePost(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.create({\n        data: {\n            author: await getSessionEmailOrThrow(),\n            postId,\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function removeLike(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.deleteMany({\n        where: {\n            postId,\n            author: await getSessionEmailOrThrow(),\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function getSinglePostData(postId: string) {\n    const post = await prisma.post.findFirstOrThrow({where:{id:postId}})\n    const authorProfile = await prisma.profile.findFirstOrThrow({where:{email:post.author}})\n    const comments = await prisma.comment.findMany({where:{postId:post.id}})\n    const commentsAuthors = await prisma.profile.findMany({\n        where: {\n            email: {in: uniq(comments.map(c => c.author))}\n        }\n    })\n    const myLike = await prisma.like.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    const myBookmark = await prisma.bookmark.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    return {\n        post,\n        authorProfile,\n        comments,\n        commentsAuthors,\n        myLike,\n        myBookmark\n    }\n}\n\nexport async function followProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.create({\n        data: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n            followedProfileId: profileIdToFollow,\n        }\n    })\n}\n\nexport async function unfollowProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.deleteMany({\n        where: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n        }\n    })\n}\n\nexport async function bookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.create({\n        data: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function unbookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.deleteMany({\n        where: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function sendMessage(receiverId: string, data: FormData) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    return prisma.message.create({\n        data: {\n            senderId: sessionProfile.id,\n            receiverId: receiverId,\n            content: data.get('text') as string,\n        }\n    })\n}\n\nexport async function postStory(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const storyDoc = await prisma.story.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            caption: data.get('caption') as string || '',\n        }\n    })\n    return storyDoc.id;\n}"],"names":[],"mappings":";;;;;;;IA0JsB,eAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 804, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/actions.ts"],"sourcesContent":["'use server';\n\nimport { uniq } from \"lodash\";\nimport { auth } from \"./auth\";\nimport { prisma } from \"./db\";\n\nexport async function getSessionEmail(): Promise<string|null|undefined> {\n    const session = await auth();\n    return session?.user?.email;\n}\n\nexport async function getSessionEmailOrThrow(): Promise<string> {\n    const userEmail = await getSessionEmail();\n    if (!userEmail) {\n        throw 'not logged in';\n    }\n    return userEmail;\n}\n\nexport async function updateProfile(data: FormData){\n    const userEmail = await getSessionEmailOrThrow();\n    const newUserInfo = {\n        username: data.get('username') as string,\n        name: data.get('name') as string,\n        subtitle: data.get('subtitle') as string,\n        bio: data.get('bio') as string,\n        avatar: data.get('avatar') as string,\n    };\n    await prisma.profile.upsert({\n        where: {\n            email: userEmail,\n        },\n        update: newUserInfo,\n        create: {\n            email: userEmail,\n            ...newUserInfo,\n        },\n    });\n}\n\nexport async function postEntry(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const postDoc = await prisma.post.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            description: data.get('description') as string || '',\n        }\n    })\n    return postDoc.id;\n}\n\nexport async function postComment(data: FormData) {\n    const authorEmail = await getSessionEmailOrThrow();\n    return prisma.comment.create({\n        data: {\n            author: authorEmail,\n            postId: data.get('postId') as string,\n            text: data.get('text') as string,\n        }\n    })\n}\n\nasync function updatePostLikesCount(postId: string) {\n    await prisma.post.update({\n        where: {id:postId},\n        data: {\n            likesCount: await prisma.like.count({where:{postId}}),\n        }\n    })\n}\n\nexport async function likePost(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.create({\n        data: {\n            author: await getSessionEmailOrThrow(),\n            postId,\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function removeLike(data: FormData) {\n    const postId = data.get('postId') as string;\n    await prisma.like.deleteMany({\n        where: {\n            postId,\n            author: await getSessionEmailOrThrow(),\n        }\n    })\n    await updatePostLikesCount(postId);\n}\n\nexport async function getSinglePostData(postId: string) {\n    const post = await prisma.post.findFirstOrThrow({where:{id:postId}})\n    const authorProfile = await prisma.profile.findFirstOrThrow({where:{email:post.author}})\n    const comments = await prisma.comment.findMany({where:{postId:post.id}})\n    const commentsAuthors = await prisma.profile.findMany({\n        where: {\n            email: {in: uniq(comments.map(c => c.author))}\n        }\n    })\n    const myLike = await prisma.like.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    const myBookmark = await prisma.bookmark.findFirst({\n        where: {\n            author: await getSessionEmailOrThrow(),\n            postId: post.id,\n        }\n    })\n    return {\n        post,\n        authorProfile,\n        comments,\n        commentsAuthors,\n        myLike,\n        myBookmark\n    }\n}\n\nexport async function followProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.create({\n        data: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n            followedProfileId: profileIdToFollow,\n        }\n    })\n}\n\nexport async function unfollowProfile(profileIdToFollow: string) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    await prisma.follower.deleteMany({\n        where: {\n            followingProfileEmail: sessionProfile.email,\n            followingProfileId: sessionProfile.id,\n        }\n    })\n}\n\nexport async function bookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.create({\n        data: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function unbookmarkPost(postId:string) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    await prisma .bookmark.deleteMany({\n        where: {\n            author: sessionEmail,\n            postId\n        }\n    })\n}\n\nexport async function sendMessage(receiverId: string, data: FormData) {\n    const sessionProfile = await prisma.profile.findFirstOrThrow({\n        where: {\n            email: await getSessionEmailOrThrow(),\n        }\n    })\n    return prisma.message.create({\n        data: {\n            senderId: sessionProfile.id,\n            receiverId: receiverId,\n            content: data.get('text') as string,\n        }\n    })\n}\n\nexport async function postStory(data: FormData) {\n    const sessionEmail = await getSessionEmailOrThrow();\n    const storyDoc = await prisma.story.create({\n        data: {\n            author: sessionEmail,\n            image: data.get('image') as string,\n            caption: data.get('caption') as string || '',\n        }\n    })\n    return storyDoc.id;\n}"],"names":[],"mappings":";;;;;;;IAoKsB,iBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 816, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/components/BookmarkButton.tsx"],"sourcesContent":["'use client'\nimport { bookmarkPost, unbookmarkPost } from \"@/actions\";\nimport { Like, Post } from \"@prisma/client\";\nimport { BookmarkIcon } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\n\nexport default function BookmarkButton({\n    post, \n    sessionBookmark,\n}:{\n    post:Post, \n    sessionBookmark:Like | null,\n}) {\n    const router = useRouter();\n    const [bookmarkedByMe, setBookmarkedByMe] = useState(!!sessionBookmark); \n    return (\n        <form \n        action={async (data:FormData) => {\n            setBookmarkedByMe(prev => !prev);\n            if (bookmarkedByMe) {\n                await unbookmarkPost(post.id);\n            } else {\n                await bookmarkPost(post.id);\n            }\n            router.refresh();\n        }}\n        className=\"flex items-center gap-2\">\n            <input type=\"hidden\" name=\"postId\" value={post.id}/>\n            <button \n            type=\"submit\" \n            className=\"cursor-pointer\">\n                <BookmarkIcon className={bookmarkedByMe ? 'fill-gray-800' : 'text-gray-800'} /> \n            </button>\n        </form>\n    )\n}"],"names":[],"mappings":";;;;;AACA;AAAA;AAEA;AACA;AACA;AALA;;;;;;AAOe,SAAS,eAAe,EACnC,IAAI,EACJ,eAAe,EAIlB;IACG,MAAM,SAAS,IAAA,+IAAS;IACxB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,iNAAQ,EAAC,CAAC,CAAC;IACvD,qBACI,8OAAC;QACD,QAAQ,OAAO;YACX,kBAAkB,CAAA,OAAQ,CAAC;YAC3B,IAAI,gBAAgB;gBAChB,MAAM,IAAA,6JAAc,EAAC,KAAK,EAAE;YAChC,OAAO;gBACH,MAAM,IAAA,2JAAY,EAAC,KAAK,EAAE;YAC9B;YACA,OAAO,OAAO;QAClB;QACA,WAAU;;0BACN,8OAAC;gBAAM,MAAK;gBAAS,MAAK;gBAAS,OAAO,KAAK,EAAE;;;;;;0BACjD,8OAAC;gBACD,MAAK;gBACL,WAAU;0BACN,cAAA,8OAAC,8NAAY;oBAAC,WAAW,iBAAiB,kBAAkB;;;;;;;;;;;;;;;;;AAI5E","debugId":null}}]
}