module.exports=[994,t=>{"use strict";t.s(["handler",()=>tW,"patchFetch",()=>tK,"routeModule",()=>tG,"serverHooks",()=>tL,"workAsyncStorage",()=>tF,"workUnitAsyncStorage",()=>tM],994);var e=t.i(47909),r=t.i(74017),a=t.i(96250),i=t.i(59756),n=t.i(61916),o=t.i(69741),s=t.i(16795),u=t.i(87718),c=t.i(95169),l=t.i(47587),d=t.i(66012),h=t.i(70101),p=t.i(26937),w=t.i(10372),f=t.i(93695);t.i(52474);var g=t.i(220);t.s(["POST",()=>tN],6906);var m=t.i(89171),y=class extends Error{constructor(t,e,r){super(t),this.statusCode=e,this.details=r,this.name="PinataError"}},T=class extends y{constructor(t,e,r){super(t,e,r),this.name="NetworkError"}},R=class extends y{constructor(t,e,r){super(t,e,r),this.name="AuthenticationError"}},$=class extends y{constructor(t,e){super(t,void 0,e),this.name="ValidationError"}};function k(t){var e,r;return e=t=t.trim(),/^Qm[1-9A-HJ-NP-Za-km-z]{44}$/.test(e)||(r=t,/^b[a-z2-7]{58,}$/.test(r))}async function E(t){let e;if("string"!=typeof t)throw Error("Input is not a string");let r=t=>{let e=t.split("/");return k(e[0])?e[0]:null},a=r(t);if(a)return{containsCid:!0,cid:a};try{e=new URL(t)}catch(e){for(let e of t.split(/\/|\?/)){let t=r(e);if(t)return{containsCid:!0,cid:t}}return{containsCid:!1,cid:null}}for(let t of e.hostname.split("."))if(k(t))return{containsCid:!0,cid:t};for(let t of e.pathname.split("/")){let e=r(t);if(e)return{containsCid:!0,cid:e}}return{containsCid:!1,cid:null}}async function H(t,e){let r=await E(t);if(!0!==r.containsCid)throw Error("url does not contain CID");if(!t.startsWith("https")&&!t.startsWith("ipfs://"))return`${e}/ipfs/${t}`;let a=new URL(t),i=a.pathname+a.search+a.hash;if(t.startsWith(`ipfs://${r.cid}`))return`${e}/ipfs/${r.cid}${i}`;if(t.includes(`/ipfs/${r.cid}`)||t.includes(`/ipns/${r.cid}`))return`${e}${i}`;if(a.hostname.includes(r.cid))return`${e}/ipfs/${r.cid}${i}`;throw Error("unsupported URL pattern, please submit a github issue with the URL utilized")}var U=t=>{let e=t?.pinataGateway;return t&&e&&(e&&!e.startsWith("https://")&&(e=`https://${e}`),t.pinataGateway=e),t},A=async(t,e)=>{if(!t)throw new $("Pinata configuration is missing");let r=new URLSearchParams;if(e){let{cid:t,gateway_domain:a,start_date:i,end_date:n,file_name:o,user_agent:s,country:u,region:c,referer:l,limit:d,sort_order:h,date_interval:p,sort_by:w}=e;t&&r.append("cid",t),a&&r.append("gateway_domain",a),i&&r.append("start_date",i),n&&r.append("end_date",n),o&&r.append("file_name",o),s&&r.append("user_agent",s.toString()),u&&r.append("country",u.toString()),c&&r.append("region",c),l&&r.append("referer",l.toString()),d&&r.append("limit",d.toString()),h&&r.append("sort_order",h),w&&r.append("sort_by",w),p&&r.append("by",p)}let a="https://api.pinata.cloud/v3";t.endpointUrl&&(a=t.endpointUrl);let i=`${a}/ipfs/gateway_analytics_time_series?${r.toString()}`;try{let e;e=t.customHeaders&&Object.keys(t.customHeaders).length>0?{...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/analyticsDateInterval"};let r=await fetch(i,{method:"GET",headers:e});if(!r.ok){let t=await r.text();if(401===r.status||403===r.status)throw new R(`Authentication failed: ${t}`,r.status,{error:t,code:"AUTH_ERROR",metadata:{requestUrl:r.url}});throw new T(`HTTP error: ${t}`,r.status,{error:t,code:"HTTP_ERROR",metadata:{requestUrl:r.url}})}return(await r.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing anaytics usage: ${t.message}`);throw new y("An unknown error occurred while fetching gateway usage")}},P=async(t,e)=>{if(!t)throw new $("Pinata configuration is missing");let r=new URLSearchParams;if(e){let{cid:a,gateway_domain:i,start_date:n,end_date:o,file_name:s,user_agent:u,country:c,region:l,referer:d,limit:h,sort_order:p,sort_by:w,attribute:f}=e,g=i||t.pinataGateway;if(g){let t=g.replace(/^https?:\/\//,"");r.append("gateway_domain",t)}a&&r.append("cid",a),n&&r.append("start_date",n),o&&r.append("end_date",o),s&&r.append("file_name",s),u&&r.append("user_agent",u.toString()),c&&r.append("country",c.toString()),l&&r.append("region",l),d&&r.append("referer",d.toString()),h&&r.append("limit",h.toString()),p&&r.append("sort_order",p),w&&r.append("sort_by",w),f&&r.append("by",f)}let a="https://api.pinata.cloud/v3";t.endpointUrl&&(a=t.endpointUrl);let i=`${a}/ipfs/gateway_analytics_top?${r.toString()}`;try{let e;e=t.customHeaders&&Object.keys(t.customHeaders).length>0?{...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/analyticsTopUsage"};let r=await fetch(i,{method:"GET",headers:e});if(!r.ok){let t=await r.text();if(401===r.status||403===r.status)throw new R(`Authentication failed: ${t}`,r.status,{error:t,code:"AUTH_ERROR",metadata:{requestUrl:r.url}});throw new T(`HTTP error: ${t}`,r.status,{error:t,code:"HTTP_ERROR",metadata:{requestUrl:r.url}})}return await r.json()}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing anaytics usage: ${t.message}`);throw new y("An unknown error occurred while fetching gateway usage")}},_=async t=>{let e;if(!t)throw new $("Pinata configuration is missing");let r="https://api.pinata.cloud";t.endpointUrl&&(r=t.endpointUrl),e=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/testAuthentication"};try{let t=await fetch(`${r}/data/testAuthentication`,{method:"GET",headers:e});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return await t.json()}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing authentication: ${t.message}`);throw new y("An unknown error occurred while testing authentication")}},v=t=>new Promise(e=>{setTimeout(e,t)}),O=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i=[];a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/deleteFile"};let n="https://api.pinata.cloud/v3";for(let o of(t.endpointUrl&&(n=t.endpointUrl),e))try{let t=await fetch(`${n}/files/${r}/${o}`,{method:"DELETE",headers:a});if(await v(300),!t.ok){let e=await t.text();if(401===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}});throw new T("HTTP error",t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}i.push({id:o,status:t.statusText})}catch(e){let t;t=e instanceof y?e.message:e instanceof Error?`Error deleting file ${o}: ${e.message}`:`An unknown error occurred while deleting file ${o}`,i.push({id:o,status:t})}return i},q=async(t,e)=>{let r;if(!t)throw new $("Pinata configuration is missing");r=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/vectorizeFile"};let a="https://uploads.pinata.cloud/v3";t.uploadUrl&&(a=t.uploadUrl);try{let t=await fetch(`${a}/vectorize/files/${e}`,{method:"DELETE",headers:r});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return await t.json()}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing vectorize file: ${t.message}`);throw new y("An unknown error occurred while vectorizing file")}},b=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/deleteSwap"};let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/files/${r}/swap/${e}`,{method:"DELETE",headers:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R("Authentication failed",t.status,{error:e,code:"AUTH_ERROR"});if(403===t.status)throw new y("Unauthorized CID Swap Deletion",t.status,{error:e,code:"UNAUTHORIZED"});if(404===t.status)throw new y("CID not pinned to account",t.status,{error:e,code:"NOT_FOUND"});throw new T("HTTP error occurred",t.status,{error:e,code:"NETWORK_ERROR"})}return t.statusText}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing deleteSwap: ${t.message}`,void 0,{code:"DELETE_SWAP_ERROR"});throw new y("An unknown error occurred while deleting swap",void 0,{code:"UNKNOWN_ERROR"})}},S=async(t,e,r)=>{if(!t)throw new $("Pinata configuration is missing");let a=new URLSearchParams;if(r){let{name:t,group:e,cid:i,order:n,limit:o,mimeType:s,pageToken:u,cidPending:c,metadata:l,noGroup:d}=r;o&&a.append("limit",o.toString()),t&&a.append("name",t),e&&a.append("group",e),i&&a.append("cid",i),s&&a.append("mimeType",s),n&&a.append("order",n),u&&a.append("pageToken",u),c&&a.append("cidPending","true"),d&&a.append("group","null"),l&&"object"==typeof l&&Object.entries(l).forEach(([t,e])=>{a.append(`keyvalues[${t.toString()}]`,e.toString())})}let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);let n=`${i}/files/${e}?${a.toString()}`;try{let e;e=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/listFiles"};let r=await fetch(n,{method:"GET",headers:e});if(!r.ok){let t=await r.text();if(401===r.status||403===r.status)throw new R(`Authentication failed: ${t}`,r.status,{error:t,code:"AUTH_ERROR",metadata:{requestUrl:r.url}});throw new T(`HTTP error: ${t}`,r.status,{error:t,code:"HTTP_ERROR",metadata:{requestUrl:r.url}})}return(await r.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing list files: ${t.message}`);throw new y("An unknown error occurred while listing files")}},C=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i=JSON.stringify({swap_cid:e.swapCid});a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/swapCid"};let n="https://api.pinata.cloud/v3";t.endpointUrl&&(n=t.endpointUrl);try{let t=await fetch(`${n}/files/${r}/swap/${e.cid}`,{method:"PUT",headers:a,body:i});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});if(403===t.status)throw new y("Unauthorized CID Swap",t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});if(404===t.status)throw new y("CID not pinned to account",t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing CID Swap: ${t.message}`);throw new y("An unknown error occurred while swapping CID")}},j=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/swapHistory"};let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/files/${r}/swap/${e.cid}?domain=${e.domain}`,{method:"GET",headers:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});if(404===t.status)throw new y("CID does not have history",t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error fetching swap history: ${t.message}`);throw new y("An unknown error occurred while fetching swap history")}},z=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");if(!e.name&&(!e.keyvalues||0===Object.keys(e.keyvalues).length))throw new $("At least one of 'name' or 'keyvalues' must be provided");let i={};void 0!==e.name&&(i.name=e.name),e.keyvalues&&Object.keys(e.keyvalues).length>0&&(i.keyvalues=e.keyvalues);let n=JSON.stringify(i);a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/updateMetadata"};let o="https://api.pinata.cloud/v3";t.endpointUrl&&(o=t.endpointUrl);try{let t=await fetch(`${o}/files/${r}/${e.id}`,{method:"PUT",headers:a,body:n});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing updateFile: ${t.message}`);throw new y("An unknown error occurred while updating file")}},x=async(t,e)=>{let r;if(!t)throw new $("Pinata configuration is missing");r=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/vectorizeFile"};let a="https://uploads.pinata.cloud/v3";t.uploadUrl&&(a=t.uploadUrl);try{let t=await fetch(`${a}/vectorize/files/${e}`,{method:"POST",headers:r});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return await t.json()}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing vectorize file: ${t.message}`);throw new y("An unknown error occurred while vectorizing file")}},J=async(t,e)=>{let r;if(!t)throw new $("Pinata configuration is missing");r=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/vectorQuery"};let a="https://uploads.pinata.cloud/v3";t.uploadUrl&&(a=t.uploadUrl);let i=JSON.stringify({text:e.query});try{let n=await fetch(`${a}/vectorize/groups/${e.groupId}/query`,{method:"POST",headers:r,body:i});if(!n.ok){let t=await n.text();if(401===n.status||403===n.status)throw new R(`Authentication failed: ${t}`,n.status,{error:t,code:"AUTH_ERROR",metadata:{requestUrl:n.url}});throw new T(`HTTP error: ${t}`,n.status,{error:t,code:"HTTP_ERROR",metadata:{requestUrl:n.url}})}let o=(await n.json()).data;if(e.returnFile){if(0===o.matches.length)throw new y("No files returned in query to fetch");let e=o.matches[0].cid;return await N(t,e,"files")}return o}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing vectorize file: ${t.message}`);throw new y("An unknown error occurred while vectorizing file")}},B=async(t,e)=>{let r;if(!t)throw new $("Pinata configuration is missing");let a=new URLSearchParams({includesCount:"false"});if(e){let{cid:t,status:r,sort:i,limit:n,pageToken:o}=e;t&&a.append("cid",t.toString()),r&&a.append("status",r.toString()),i&&a.append("sort",i.toString()),n&&a.append("limit",n.toString()),o&&a.append("pageToken",o.toString())}let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);let n=`${i}/files/public/pin_by_cid?${a.toString()}`;r=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/pinJobs"};try{let t=await fetch(n,{method:"GET",headers:r});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing pinJobs: ${t.message}`);throw new y("An unknown error occurred while listing pin jobs")}},I=async(t,e)=>{let r;if(!t)throw new $("Pinata configuration is missing");r=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/deletePinRequest"};let a="https://api.pinata.cloud/v3";t.endpointUrl&&(a=t.endpointUrl);try{let t=await fetch(`${a}/files/public/pin_by_cid/${e}`,{method:"DELETE",headers:r});if(!t.ok){let e=await t.text();if(401===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}});throw new T("HTTP error",t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return"OK"}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error deleting pin by request: ${t.message}`);throw new y("An unknown error occurred while deleting pin by CID request")}},N=async(t,e,r,a)=>{let i;if(!t)throw new $("Pinata configuration is missing");let n=`${t?.pinataGateway}/${r}/${e}`,o=new URLSearchParams;a&&(a.width&&o.append("img-width",a.width.toString()),a.height&&o.append("img-height",a.height.toString()),a.dpr&&o.append("img-dpr",a.dpr.toString()),a.fit&&o.append("img-fit",a.fit),a.gravity&&o.append("img-gravity",a.gravity),a.quality&&o.append("img-quality",a.quality.toString()),a.format&&o.append("img-format",a.format),void 0!==a.animation&&o.append("img-anim",a.animation.toString()),a.sharpen&&o.append("img-sharpen",a.sharpen.toString()),!0===a.onError&&o.append("img-onerror","redirect"),a.metadata&&o.append("img-metadata",a.metadata)),t?.pinataGatewayKey&&o.append("pinataGatewayToken",t.pinataGatewayKey);let s=o.toString();if(s&&(n+=`?${s}`),"ipfs"===r){let t=await fetch(n);if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication Failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}let e=t.headers.get("content-type")?.split(";")[0]||null;return{data:e?.includes("application/json")?await t.json():e?.includes("text/")?await t.text():await t.blob(),contentType:e}}let u=JSON.stringify({url:n,date:Math.floor(new Date().getTime()/1e3),expires:30,method:"GET"}),c="https://api.pinata.cloud/v3";t.endpointUrl&&(c=t.endpointUrl),i=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{"Content-Type":"application/json",Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/getCid"};let l=await fetch(`${c}/files/sign`,{method:"POST",headers:i,body:u}),d=await l.json();try{let t=await fetch(d.data);if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication Failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}let e=t.headers.get("content-type")?.split(";")[0]||null;return{data:e?.includes("application/json")?await t.json():e?.includes("text/")?await t.text():await t.blob(),contentType:e}}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing getCid: ${t.message}`);throw new y("An unknown error occurred while getting CID contents")}},D=async(t,e,r)=>{let a,i=r||t?.pinataGateway||"https://gateway.pinata.cloud";return a=await H(e,i),t?.pinataGatewayKey&&t?.pinataGatewayKey,a},G=async(t,e,r)=>{let a,i;if(!t)throw new $("Pinata configuration is missing");a=e?.gateway?e.gateway.startsWith("https://")?e.gateway:`https://${e.gateway}`:t.pinataGateway;let n=`${a}/files/${e.cid}`,o=new URLSearchParams;r&&(r.width&&o.append("img-width",r.width.toString()),r.height&&o.append("img-height",r.height.toString()),r.dpr&&o.append("img-dpr",r.dpr.toString()),r.fit&&o.append("img-fit",r.fit),r.gravity&&o.append("img-gravity",r.gravity),r.quality&&o.append("img-quality",r.quality.toString()),r.format&&o.append("img-format",r.format),void 0!==r.animation&&o.append("img-anim",r.animation.toString()),r.sharpen&&o.append("img-sharpen",r.sharpen.toString()),!0===r.onError&&o.append("img-onerror","redirect"),r.metadata&&o.append("img-metadata",r.metadata));let s=o.toString();s&&(n+=`?${s}`);let u=JSON.stringify({url:n,date:e?.date||Math.floor(new Date().getTime()/1e3),expires:e.expires,method:"GET"}),c="https://api.pinata.cloud/v3";t.endpointUrl&&(c=t.endpointUrl),i=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{"Content-Type":"application/json",Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/createSignURL"};try{let t=await fetch(`${c}/files/private/download_link`,{method:"POST",headers:i,body:u});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication Failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing createSignedURL: ${t.message}`);throw new y("An unknown error occurred while getting signed url")}},F=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i=t=>new Promise(e=>{setTimeout(e,t)}),n=[];a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/addToGroup"};let o="https://api.pinata.cloud/v3";for(let s of(t.endpointUrl&&(o=t.endpointUrl),e.files))try{let t=await fetch(`${o}/groups/${r}/${e.groupId}/ids/${s}`,{method:"PUT",headers:a});if(await i(300),!t.ok){let e=await t.text();if(401===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}n.push({id:s,status:t.statusText})}catch(e){let t;t=e instanceof y?e.message:e instanceof Error?`Error adding file ${s} to group: ${e.message}`:`An unknown error occurred while adding file ${s} to group`,n.push({id:s,status:t})}return n},M=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i=JSON.stringify({name:e.name,is_public:e.isPublic});a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/createGroup"};let n="https://api.pinata.cloud/v3";t.endpointUrl&&(n=t.endpointUrl);try{let t=await fetch(`${n}/groups/${r}`,{method:"POST",headers:a,body:i});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing createGroup: ${t.message}`);throw new y("An unknown error occurred while creating a group")}},L=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/deleteGroup"};let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/groups/${r}/${e.groupId}`,{method:"DELETE",headers:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return t.statusText}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing deleteGroup: ${t.message}`);throw new y("An unknown error occurred while deleting a group")}},K=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/getGroup"};let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/groups/${r}/${e.groupId}`,{method:"GET",headers:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing getGroup: ${t.message}`);throw new y("An unknown error occurred while getting info for a group")}},W=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/listGroups"};let i=new URLSearchParams;if(r){let{pageToken:t,name:e,limit:a,isPublic:n}=r;t&&i.append("pageToken",t.toString()),n&&i.append("isPublic",n.toString()),e&&i.append("name",e),void 0!==a&&i.append("limit",a.toString())}let n="https://api.pinata.cloud/v3";t.endpointUrl&&(n=t.endpointUrl);try{let t=await fetch(`${n}/groups/${e}?${i.toString()}`,{method:"GET",headers:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing listGroups: ${t.message}`);throw new y("An unknown error occurred while listing groups")}},V=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i=t=>new Promise(e=>{setTimeout(e,t)}),n=[];a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/addToGroup"};let o="https://api.pinata.cloud/v3";for(let s of(t.endpointUrl&&(o=t.endpointUrl),e.files))try{let t=await fetch(`${o}/groups/${r}/${e.groupId}/ids/${s}`,{method:"DELETE",headers:a});if(await i(300),!t.ok){let e=await t.text();if(401===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}n.push({id:s,status:t.statusText})}catch(e){let t;t=e instanceof y?e.message:e instanceof Error?`Error adding file ${s} to group: ${e.message}`:`An unknown error occurred while adding file ${s} to group`,n.push({id:s,status:t})}return n},X=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i=JSON.stringify({name:e.name,is_public:e.isPublic});a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/updateGroup"};let n="https://api.pinata.cloud/v3";t.endpointUrl&&(n=t.endpointUrl);try{let t=await fetch(`${n}/groups/${r}/${e.groupId}`,{method:"PUT",headers:a,body:i});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing updateGroup: ${t.message}`);throw new y("An unknown error occurred while updating group")}},Q=async(t,e)=>{let r;if(!t)throw new $("Pinata configuration is missing");r=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/createKey"};let a=JSON.stringify(e),i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/pinata/keys`,{method:"POST",headers:r,body:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return await t.json()}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing createKey: ${t.message}`);throw new y("An unknown error occurred while creating API key")}},Z=async(t,e)=>{let r;if(!t)throw new $("Pinata configuration is missing");r=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/listKeys"};let a=new URLSearchParams;if(e){let{offset:t,name:r,revoked:i,limitedUse:n,exhausted:o}=e;t&&a.append("offset",t.toString()),void 0!==i&&a.append("revoked",i.toString()),void 0!==n&&a.append("limitedUse",n.toString()),void 0!==o&&a.append("exhausted",o.toString()),r&&a.append("name",r)}let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/pinata/keys?${a.toString()}`,{method:"GET",headers:r});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).keys}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing listKeys: ${t.message}`);throw new y("An unknown error occurred while listing API keys")}},Y=t=>new Promise(e=>{setTimeout(e,t)}),tt=async(t,e)=>{let r;if(!t)throw new $("Pinata configuration is missing");t.customHeaders&&Object.keys(t.customHeaders).length>0?(r={Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders},r={...t.customHeaders}):r={Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/revokeKeys"};let a=[],i="https://api.pinata.cloud/v3";for(let n of(t.endpointUrl&&(i=t.endpointUrl),e))try{let t=await fetch(`${i}/pinata/keys/${n}`,{method:"PUT",headers:r});if(await Y(300),!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}let e=await t.json();a.push({key:n,status:e})}catch(e){let t;t=e instanceof y?e.message:e instanceof Error?`Error revoking key ${n}: ${e.message}`:`An unknown error occurred while revoking key ${n}`,a.push({key:n,status:t})}return a},te=async(t,e,r,a)=>{let i;if(!t)throw new $("Pinata configuration is missing");let n=a?.keys||t?.pinataJwt,o=a?.metadata?.name?a?.metadata?.name:"base64 string",s=new Blob([Buffer.from(e,"base64")]),u=new FormData;u.append("file",s,o),u.append("network",r),u.append("name",o),a?.groupId&&u.append("group_id",a.groupId),a?.metadata?.keyvalues&&u.append("keyvalues",JSON.stringify(a.metadata.keyvalues)),i=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${n}`,...t.customHeaders}:{Authorization:`Bearer ${n}`,Source:"sdk/base64"};let c="https://uploads.pinata.cloud/v3";if(t.uploadUrl&&(c=t.uploadUrl),a?.url)try{let t=await fetch(a.url,{method:"POST",body:u});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing base64: ${t.message}`);throw new y("An unknown error occurred while trying to upload base64")}try{let t=await fetch(`${c}/files`,{method:"POST",headers:i,body:u});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}let e=(await t.json()).data;if(a?.vectorize){let r=await fetch(`${c}/vectorize/files/${e.id}`,{method:"POST",headers:{Authorization:`Bearer ${n}`}});if(r.ok)e.vectorized=!0;else{let e=await r.text();throw new T(`HTTP error during vectorization: ${e}`,r.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}}return e}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing base64: ${t.message}`);throw new y("An unknown error occurred while trying to upload base64")}},tr=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i={date:e?.date||Math.floor(new Date().getTime()/1e3),expires:e.expires};e.groupId&&(i.group_id=e.groupId),e.name&&(i.filename=e.name),e.keyvalues&&(i.keyvalues=e.keyvalues),r&&(i.network=r),e.streamable&&(i.streamable=e.streamable),e.maxFileSize&&(i.max_file_size=e.maxFileSize),e.mimeTypes&&(i.allow_mime_types=e.mimeTypes);let n="https://uploads.pinata.cloud/v3";t.uploadUrl&&(n=t.uploadUrl),a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{"Content-Type":"application/json",Authorization:`Bearer ${t.pinataJwt}`,Source:"sdk/createSignURL"};let o=0;for(;o<=3;)try{let t=await fetch(`${n}/files/sign`,{method:"POST",headers:a,cache:"no-store",body:JSON.stringify(i)});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication Failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});let r=new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}});throw t.status>=400&&t.status<500&&t.status,r}return(await t.json()).data}catch(e){if(e instanceof R||e instanceof T&&e.statusCode&&e.statusCode>=400&&e.statusCode<500&&429!==e.statusCode)throw e;if(++o>3){if(e instanceof y)throw e;if(e instanceof Error)throw new y(`Error processing createSignedURL after 3 retries: ${e.message}`);throw new y("An unknown error occurred while getting signed url after 3 retries")}let t=Math.min(1e3*Math.pow(2,o-1),4e3);await new Promise(e=>setTimeout(e,t))}return Promise.reject(new y("Unexpected error: retry loop completed without resolution"))},ta=async(t,e,r,a)=>{let i;if(!t)throw new $("Pinata configuration is missing");let n=a?.keys||t.pinataJwt,o="https://uploads.pinata.cloud/v3";if(t.uploadUrl&&(o=t.uploadUrl),e.size>0x5a00000){let i,s;i=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${n}`,...t.customHeaders}:{Authorization:`Bearer ${n}`,Source:"sdk/file"};let u=a?.metadata?.name||e.name||"File from SDK",c=`filename ${btoa(u)},filetype ${btoa(e.type)},network ${btoa(r)}`;a?.groupId&&(c+=`,group_id ${btoa(a.groupId)}`),a?.metadata?.keyvalues&&(c+=`,keyvalues ${btoa(JSON.stringify(a.metadata.keyvalues))}`),a?.streamable&&(c+=`,streamable ${btoa("true")}`);let l=`${o}/files`;a?.url&&(l=a.url);let d=await fetch(l,{method:"POST",headers:{"Upload-Length":`${e.size}`,"Upload-Metadata":c,...i}}),h=d.headers.get("Location");if(!h){let t=await d.text();throw new T("Upload URL not provided",d.status,{error:t,code:"HTTP_ERROR",metadata:{requestUrl:d.url,requestHeaders:d.headers}})}let p=Math.ceil(e.size/0x3200001),w=0;for(let t=0;t<p;t++){let t=e.slice(w,w+0x3200001),r=0;for(;r<=5;)try{if((s=await fetch(h,{method:"PATCH",headers:{"Content-Type":"application/offset+octet-stream","Upload-Offset":w.toString(),...i},body:t})).ok)break;{let t=await s.text();throw Error(`HTTP ${s.status}: ${t}`)}}catch(e){if(++r>5){let t=s?await s.text().catch(()=>"Unknown error"):e instanceof Error?e.message:String(e);throw new T(`HTTP error during chunk upload after 5 retries: ${t}`,s?.status||0,{error:t,code:"HTTP_ERROR",metadata:{requestUrl:s?.url||h,retriesAttempted:5}})}let t=Math.min(1e3*Math.pow(2,r-1),1e4);await new Promise(e=>setTimeout(e,t))}w+=t.size}if(204===s.status){let i,u=s.headers.get("upload-cid");if(!t.pinataJwt)return{id:"",name:"",cid:u,size:e.size,created_at:"",number_of_files:1,group_id:null,mime_type:"",keyvalues:{},vectorized:!1,network:""};i=t.endpointUrl?t.endpointUrl:"https://api.pinata.cloud/v3";let c=await fetch(`${i}/files/${r}?cid=${u}`,{method:"GET",headers:{Authorization:`Bearer ${n}`}}),l=(await c.json()).data.files[0];if(a?.vectorize){let t=await fetch(`${o}/vectorize/files/${l.id}`,{method:"POST",headers:{Authorization:`Bearer ${n}`}});if(t.ok)l.vectorized=!0;else{let e=await t.text();throw new T(`HTTP error during vectorization: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}}return l}}i=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${n}`,...t.customHeaders}:{Authorization:`Bearer ${n}`,Source:"sdk/file"};let s=new FormData;if(s.append("file",e,e.name),s.append("network",r),s.append("name",a?.metadata?.name||e.name||"File from SDK"),a?.groupId&&s.append("group_id",a.groupId),a?.metadata?.keyvalues&&s.append("keyvalues",JSON.stringify(a.metadata.keyvalues)),a?.streamable&&s.append("streamable","true"),a?.url)try{let t=await fetch(a.url,{method:"POST",headers:i,body:s});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error uploading file: ${t.message}`,void 0,{error:t.toString()});throw new y("An unknown error occurred while trying to upload file")}try{let t=await fetch(`${o}/files`,{method:"POST",headers:i,body:s});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}let e=(await t.json()).data;if(a?.vectorize){let r=await fetch(`${o}/vectorize/files/${e.id}`,{method:"POST",headers:{Authorization:`Bearer ${n}`}});if(r.ok)e.vectorized=!0;else{let e=await r.text();throw new T(`HTTP error during vectorization: ${e}`,r.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}}return e}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error uploading file: ${t.message}`,void 0,{error:t.toString()});throw new y("An unknown error occurred while trying to upload file")}},ti=async(t,e,r,a)=>{let i;if(!t)throw new $("Pinata configuration is missing");let n=a?.keys||t?.pinataJwt,o=a?.metadata?.name||"folder_from_sdk",s=new FormData;for(let t of Array.from(e)){let e=t.webkitRelativePath||`${o}/${t.name}`;s.append("file",t,e)}s.append("pinataMetadata",JSON.stringify({name:o,keyvalues:a?.metadata?.keyvalues})),s.append("pinataOptions",JSON.stringify({groupId:a?.groupId,cidVersion:1})),i=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${n}`,...t.customHeaders}:{Authorization:`Bearer ${n}`,Source:"sdk/fileArray"};let u="https://api.pinata.cloud/pinning/pinFileToIPFS";t.legacyUploadUrl&&(u=t.legacyUploadUrl);try{let t=await fetch(`${u}`,{method:"POST",headers:i,body:s});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}let e=await t.json();return{id:e.ID,name:e.Name,cid:e.IpfsHash,size:e.PinSize,created_at:e.Timestamp,number_of_files:e.NumberOfFiles,mime_type:e.MimeType,group_id:e.GroupId,keyvalues:e.Keyvalues,vectorized:!1,network:"public"}}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing fileArray: ${t.message}`);throw new y("An unknown error occurred while uploading an array of files")}},tn=async(t,e,r,a)=>{let i;if(!t)throw new $("Pinata configuration is missing");let n=a?.keys||t?.pinataJwt,o=new File([new Blob([JSON.stringify(e)])],"data.json",{type:"application/json"}),s=new FormData;s.append("file",o,o.name),s.append("network",r),s.append("name",a?.metadata?.name||o.name||"File from SDK"),a?.groupId&&s.append("group_id",a.groupId),a?.metadata?.keyvalues&&s.append("keyvalues",JSON.stringify(a.metadata.keyvalues)),i=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${n}`,...t.customHeaders}:{Authorization:`Bearer ${n}`,Source:"sdk/json"};let u="https://uploads.pinata.cloud/v3";if(t.uploadUrl&&(u=t.uploadUrl),a?.url)try{let t=await fetch(a.url,{method:"POST",body:s});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing base64: ${t.message}`);throw new y("An unknown error occurred while trying to upload base64")}try{let t=await fetch(`${u}/files`,{method:"POST",headers:i,body:s});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}let e=(await t.json()).data;if(a?.vectorize){let r=await fetch(`${u}/vectorize/files/${e.id}`,{method:"POST",headers:{Authorization:`Bearer ${n}`}});if(r.ok)e.vectorized=!0;else{let e=await r.text();throw new T(`HTTP error during vectorization: ${e}`,r.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}}return e}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing json: ${t.message}`);throw new y("An unknown error occurred while uploading json")}},to=async(t,e,r,a)=>{let i;if(!t)throw new $("Pinata configuration is missing");let n=a?.keys||t?.pinataJwt,o=new FormData,s=await fetch(e);if(!s.ok){let t=await s.text();throw new T(`HTTP error: ${t}`,s.status,{error:t,code:"HTTP_ERROR",metadata:{requestUrl:s.url}})}let u=new Blob([await s.arrayBuffer()]),c=a?.metadata?.name??"url_upload",l=new File([u],c);o.append("file",l,c),o.append("network",r),o.append("name",c),a?.groupId&&o.append("group_id",a.groupId),a?.metadata?.keyvalues&&o.append("keyvalues",JSON.stringify(a.metadata.keyvalues)),i=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${n}`,...t.customHeaders}:{Authorization:`Bearer ${n}`,Source:"sdk/url"};let d="https://uploads.pinata.cloud/v3";if(t.uploadUrl&&(d=t.uploadUrl),a?.url)try{let t=await fetch(a.url,{method:"POST",body:o});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing base64: ${t.message}`);throw new y("An unknown error occurred while trying to upload base64")}try{let t=await fetch(`${d}/files`,{method:"POST",headers:i,body:o});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}let e=(await t.json()).data;if(a?.vectorize){let r=await fetch(`${d}/vectorize/files/${e.id}`,{method:"POST",headers:{Authorization:`Bearer ${n}`}});if(r.ok)e.vectorized=!0;else{let e=await r.text();throw new T(`HTTP error during vectorization: ${e}`,r.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}}return e}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing url: ${t.message}`);throw new y("An unknown error occurred while uploading by url")}},ts=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i=r?.keys||t?.pinataJwt;a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${i}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${i}`,"Content-Type":"application/json",Source:"sdk/cid"};let n=JSON.stringify({cid:e,name:r?.metadata?r?.metadata?.name:e,keyvalues:r?.metadata?.keyvalues,group_id:r?.groupId,host_nodes:r?.peerAddresses}),o="https://api.pinata.cloud/v3";t.endpointUrl&&(o=t.endpointUrl);try{let t=await fetch(`${o}/files/public/pin_by_cid`,{method:"POST",headers:a,body:n});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing cid: ${t.message}`);throw new y("An unknown error occurred while pinning by CID")}},tu=class{constructor(t){this.config=U(t),this.requests=new th(this.config),this.bandwidth=new tl(this.config)}updateConfig(t){this.config=t,this.requests.updateConfig(t),this.bandwidth.updateConfig(t)}summary(t){return new tp(this.config,t.domain,t.start,t.end,t.interval)}},tc=class{constructor(t,e,r,a){this.config=t,this.query={gateway_domain:e,start_date:r,end_date:a,sort_by:"requests",attribute:"cid"}}cid(t){return this.query.attribute="cid",t&&(this.query.cid=t),this}fileName(t){return this.query.attribute="file_name",t&&(this.query.file_name=t),this}userAgent(t){return this.query.attribute="user_agent",t&&(this.query.user_agent=t),this}country(t){return this.query.attribute="country",t&&(this.query.country=t),this}region(t){return this.query.attribute="region",t&&(this.query.region=t),this}referer(t){return this.query.attribute="referer",t&&(this.query.referer=t),this}limit(t){return this.query.limit=t,this}sort(t){return this.query.sort_order=t,this}days(t){let{start:e,end:r}=(t=>{let e=new Date,r=new Date;return r.setDate(r.getDate()-t),{start:r.toISOString().split("T")[0],end:e.toISOString().split("T")[0]}})(t);return this.query.start_date=e,this.query.end_date=r,this}then(t,e){return P(this.config,this.query).then(t,e)}},tl=class extends tc{constructor(t){super(t,"","",""),this.query.sort_by="bandwidth"}updateConfig(t){this.config=t}customDates(t,e){return t&&(this.query.start_date=t),e&&(this.query.end_date=e),this}from(t){return this.query.gateway_domain=t,this}},td=class{constructor(t,e){this.requestCount=0,this.lastRequestTime=0,this.MAX_REQUESTS_PER_MINUTE=30,this.MINUTE_IN_MS=6e4,this.config=t,this.query=e}cid(t){return this.query.cid=t,this}fileName(t){return this.query.file_name=t,this}userAgent(t){return this.query.user_agent=t,this}country(t){return this.query.country=t,this}region(t){return this.query.region=t,this}referer(t){return this.query.referer=t,this}limit(t){return this.query.limit=t,this}sort(t){return this.query.sort_order=t,this}async getAnalytics(){throw Error("getAnalytics method must be implemented in derived class")}then(t,e){return this.getAnalytics().then(t,e)}},th=class extends tc{constructor(t){super(t,"","",""),this.query.sort_by="requests"}updateConfig(t){this.config=t}customDates(t,e){return t&&(this.query.start_date=t),e&&(this.query.end_date=e),this}from(t){return this.query.gateway_domain=t,this}},tp=class extends td{constructor(t,e,r,a,i){super(t,{gateway_domain:e,start_date:r,end_date:a,date_interval:i})}sortBy(t){return this.query.sort_by=t,this}async getAnalytics(){return A(this.config,this.query)}async all(){return this.getAnalytics()}},tw=class{constructor(t,e){this.query={},this.config=t,this.privacy=e}name(t){return this.query.name=t,this}limit(t){return this.query.limit=t,this}isPublic(t){return this.query.isPublic=t,this}pageToken(t){return this.query.pageToken=t,this}then(t,e){return this.fetchPage().then(t=>(this.nextPageToken=t.next_page_token,t)).then(t,e)}async fetchPage(){return this.nextPageToken&&(this.query.pageToken=this.nextPageToken),W(this.config,this.privacy,this.query)}async *[Symbol.asyncIterator](){for(;;){let t=await this.fetchPage();for(let e of t.groups)yield e;if(!t.next_page_token)break;this.nextPageToken=t.next_page_token}}async all(){let t=[];for await(let e of this)t.push(e);return t}},tf=class{constructor(t){this.config=U(t)}updateConfig(t){this.config=t}create(t){return M(this.config,t,"public")}list(){return new tw(this.config,"public")}get(t){return K(this.config,t,"public")}addFiles(t){return F(this.config,t,"public")}removeFiles(t){return V(this.config,t,"public")}update(t){return X(this.config,t,"public")}delete(t){return L(this.config,t,"public")}},tg=class{constructor(t){this.config=U(t)}updateConfig(t){this.config=t}create(t){return M(this.config,t,"private")}list(){return new tw(this.config,"private")}get(t){return K(this.config,t,"private")}addFiles(t){return F(this.config,t,"private")}removeFiles(t){return V(this.config,t,"private")}update(t){return X(this.config,t,"private")}delete(t){return L(this.config,t,"private")}},tm=class{constructor(t){this.config=U(t),this.public=new tf(t),this.private=new tg(t)}updateConfig(t){this.config=t}},ty=class{constructor(t){this.config=U(t)}updateConfig(t){this.config=t}create(t){return Q(this.config,t)}list(){return new tT(this.config)}revoke(t){return tt(this.config,t)}},tT=class{constructor(t){this.query={},this.config=t}offset(t){return this.query.offset=t,this}revoked(t){return this.query.revoked=t,this}limitedUse(t){return this.query.limitedUse=t,this}exhausted(t){return this.query.exhausted=t,this}name(t){return this.query.name=t,this}then(t,e){return Z(this.config,this.query).then(t,e)}async *[Symbol.asyncIterator](){let t=!0,e=0;for(;t;){this.query.offset=e;let r=await Z(this.config,this.query);for(let t of r)yield t;0===r.length?t=!1:e+=r.length}}async all(){let t=[];for await(let e of this)t.push(e);return t}},tR=class{constructor(t){this.config=U(t),this.public=new tH(t),this.private=new tE(t)}updateConfig(t){this.config=t}},t$=class{constructor(t,e){this.imgOpts={},this.config=t,this.urlOpts=e}optimizeImage(t){return this.imgOpts={...this.imgOpts,...t},this}then(t,e){return G(this.config,this.urlOpts,this.imgOpts).then(t,e)}},tk=class{constructor(t,e,r){this.options={},this.config=t,this.cid=e,this.gatewayType=r}optimizeImage(t){return this.options={...this.options,...t},this}then(t,e){return N(this.config,this.cid,this.gatewayType,this.options).then(t,e)}},tE=class{constructor(t){this.config=t}get(t){return new tk(this.config,t,"files")}createAccessLink(t){return new t$(this.config,t)}},tH=class{constructor(t){this.config=t}get(t){return new tk(this.config,t,"ipfs")}convert(t,e){return D(this.config,t,e)}},tU=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/getFile"};let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/files/${r}/${e}`,{method:"GET",headers:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing getGroup: ${t.message}`);throw new y("An unknown error occurred while getting info for a group")}},tA=class{constructor(t,e){this.query={},this.config=t,this.privacy=e}name(t){return this.query.name=t,this}group(t){return this.query.group=t,this}cid(t){return this.query.cid=t,this}mimeType(t){return this.query.mimeType=t,this}order(t){return this.query.order=t,this}limit(t){return this.query.limit=t,this}cidPending(t){return this.query.cidPending=t,this}keyvalues(t){return this.query.metadata=t,this}noGroup(t){return this.query.noGroup=t,this}pageToken(t){return this.query.pageToken=t,this}then(t,e){return this.fetchPage().then(t,e)}async fetchPage(){this.currentPageToken&&(this.query.pageToken=this.currentPageToken);let t=await S(this.config,this.privacy,this.query);return this.currentPageToken=t.next_page_token,t}async *[Symbol.asyncIterator](){for(;;){for(let t of(await this.fetchPage()).files)yield t;if(!this.currentPageToken)break}}async all(){let t=[];for await(let e of this)t.push(e);return t}},tP=class{constructor(t){this.query={},this.requestCount=0,this.lastRequestTime=0,this.MAX_REQUESTS_PER_MINUTE=30,this.MINUTE_IN_MS=6e4,this.config=t}cid(t){return this.query.cid=t,this}status(t){return this.query.status=t,this}pageLimit(t){return this.query.limit=t,this}pageToken(t){return this.query.pageToken=t,this}async fetchPage(){this.currentPageToken&&(this.query.pageToken=this.currentPageToken);let t=await B(this.config,this.query);return this.currentPageToken=t.next_page_token,t}sort(t){return this.query.sort=t,this}then(t,e){return B(this.config,this.query).then(t,e)}async rateLimit(){this.requestCount++;let t=Date.now();if(this.requestCount>=this.MAX_REQUESTS_PER_MINUTE){let e=t-this.lastRequestTime;if(e<this.MINUTE_IN_MS){let t=this.MINUTE_IN_MS-e;await new Promise(e=>setTimeout(e,t))}this.requestCount=0}this.lastRequestTime=Date.now()}async *[Symbol.asyncIterator](){for(;;){for(let t of(await this.fetchPage()).jobs)yield t;if(!this.currentPageToken)break}}async all(){let t=[];for await(let e of this)t.push(e);return t}},t_=class{constructor(t){this.config=U(t)}list(){return new tA(this.config,"public")}get(t){return tU(this.config,t,"public")}delete(t){return O(this.config,t,"public")}update(t){return z(this.config,t,"public")}addSwap(t){return C(this.config,t,"public")}getSwapHistory(t){return j(this.config,t,"public")}deleteSwap(t){return b(this.config,t,"public")}queue(){return new tP(this.config)}deletePinRequest(t){return I(this.config,t)}},tv=class{constructor(t){this.config=U(t)}list(){return new tA(this.config,"private")}get(t){return tU(this.config,t,"private")}delete(t){return O(this.config,t,"private")}update(t){return z(this.config,t,"private")}addSwap(t){return C(this.config,t,"private")}getSwapHistory(t){return j(this.config,t,"private")}deleteSwap(t){return b(this.config,t,"private")}vectorize(t){return x(this.config,t)}queryVectors(t){return J(this.config,t)}deleteVectors(t){return q(this.config,t)}},tO=class{constructor(t){this.config=U(t),this.public=new t_(t),this.private=new tv(t)}updateConfig(t){this.config=t}},tq=class{constructor(t,e,...r){this.metadata={},this.config=t,this.uploadFunction=e,this.args=r}name(t){return this.metadata||(this.metadata={}),this.metadata.name=t,this}keyvalues(t){return this.metadata||(this.metadata={}),this.metadata.keyvalues=t,this}key(t){return this.keys=t,this}vectorize(){return this.vector=!0,this}url(t){return this.uploadUrl=t,this}group(t){return this.groupId=t,this}streamable(){return this.isStreamable=!0,this}peerAddress(t){return this.peerAddresses=t,this}then(t,e){let r=this.args[this.args.length-1]||{};return this.metadata&&(r.metadata=this.metadata),this.keys&&(r.keys=this.keys),this.groupId&&(r.groupId=this.groupId),this.vector&&(r.vectorize=this.vector),this.uploadUrl&&(r.url=this.uploadUrl),this.isStreamable&&(r.streamable=this.isStreamable),this.peerAddresses&&(r.peerAddresses=this.peerAddresses),this.args[this.args.length-1]=r,this.uploadFunction(this.config,...this.args).then(t,e)}},tb=class{constructor(t){this.config=U(t)}updateConfig(t){this.config=t}file(t,e){return new tq(this.config,(t,e,r)=>ta(t,e,"public",r),t,e)}fileArray(t,e){return new tq(this.config,(t,e,r)=>ti(t,e,"public",r),t,e)}base64(t,e){return new tq(this.config,(t,e,r)=>te(t,e,"public",r),t,e)}url(t,e){return new tq(this.config,(t,e,r)=>to(t,e,"public",r),t,e)}json(t,e){return new tq(this.config,(t,e,r)=>tn(t,e,"public",r),t,e)}cid(t,e){return new tq(this.config,(t,e,r)=>ts(t,e,r),t,e)}createSignedURL(t){return tr(this.config,t,"public")}},tS=class{constructor(t){this.config=U(t)}updateConfig(t){this.config=t}file(t,e){return new tq(this.config,(t,e,r)=>ta(t,e,"private",r),t,e)}base64(t,e){return new tq(this.config,(t,e,r)=>te(t,e,"private",r),t,e)}url(t,e){return new tq(this.config,(t,e,r)=>to(t,e,"private",r),t,e)}json(t,e){return new tq(this.config,(t,e,r)=>tn(t,e,"private",r),t,e)}createSignedURL(t){return tr(this.config,t,"private")}},tC=class{constructor(t){this.config=U(t),this.public=new tb(t),this.private=new tS(t)}updateConfig(t){this.config=t}},tj=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");let i=JSON.stringify({signature:e.signature,address:e.address});a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/addSignature"};let n="https://api.pinata.cloud/v3";t.endpointUrl&&(n=t.endpointUrl);try{let t=await fetch(`${n}/files/${r}/signature/${e.cid}`,{method:"POST",headers:a,body:i});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});if(403===t.status)throw new y("Unauthorized signing, you must be the original owner of the file and it must not have a signature",t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing addSignature: ${t.message}`);throw new y("An unknown error occurred while adding signature to CID")}},tz=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/getSignature"};let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/files/${r}/signature/${e}`,{method:"GET",headers:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return(await t.json()).data}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing getSignature: ${t.message}`);throw new y("An unknown error occurred while fetching signature for CID")}},tx=async(t,e,r)=>{let a;if(!t)throw new $("Pinata configuration is missing");a=t.customHeaders&&Object.keys(t.customHeaders).length>0?{...t.customHeaders}:{Authorization:`Bearer ${t.pinataJwt}`,"Content-Type":"application/json",Source:"sdk/removeSignature"};let i="https://api.pinata.cloud/v3";t.endpointUrl&&(i=t.endpointUrl);try{let t=await fetch(`${i}/files/${r}/signature/${e}`,{method:"DELETE",headers:a});if(!t.ok){let e=await t.text();if(401===t.status||403===t.status)throw new R(`Authentication failed: ${e}`,t.status,{error:e,code:"AUTH_ERROR",metadata:{requestUrl:t.url}});throw new T(`HTTP error: ${e}`,t.status,{error:e,code:"HTTP_ERROR",metadata:{requestUrl:t.url}})}return"OK"}catch(t){if(t instanceof y)throw t;if(t instanceof Error)throw new y(`Error processing addSignature: ${t.message}`);throw new y("An unknown error occurred while adding signature to CID")}},tJ=class{constructor(t){this.config=U(t)}updateConfig(t){this.config=t}add(t){return tj(this.config,t,"public")}get(t){return tz(this.config,t,"public")}delete(t){return tx(this.config,t,"public")}},tB=class{constructor(t){this.config=U(t),this.public=new tJ(t)}updateConfig(t){this.config=t}};let tI=new class{constructor(t){this.config=U(t),this.files=new tO(this.config),this.upload=new tC(this.config),this.gateways=new tR(this.config),this.keys=new ty(this.config),this.groups=new tm(this.config),this.analytics=new tu(this.config),this.signatures=new tB(this.config)}setNewHeaders(t){this.config||(this.config={pinataJwt:"",customHeaders:{}}),this.config.customHeaders={...this.config.customHeaders,...t},this.files.updateConfig(this.config),this.upload.updateConfig(this.config),this.gateways.updateConfig(this.config),this.keys.updateConfig(this.config),this.groups.updateConfig(this.config),this.analytics.updateConfig(this.config),this.signatures.updateConfig(this.config)}setNewJwt(t){this.config||(this.config={pinataJwt:""}),this.config.pinataJwt=t,this.files.updateConfig(this.config),this.upload.updateConfig(this.config),this.gateways.updateConfig(this.config),this.keys.updateConfig(this.config),this.groups.updateConfig(this.config),this.analytics.updateConfig(this.config),this.signatures.updateConfig(this.config)}testAuthentication(){return _(this.config)}}({pinataJwt:`${process.env.PINATA_JWT}`,pinataGateway:"white-tricky-tern-300.mypinata.cloud"});async function tN(t){try{let e=(await t.formData()).get("file"),r=await tI.upload.public.file(e).group("9b39441e-55e4-4b46-8a27-33b06be198cd"),a=`https://white-tricky-tern-300.mypinata.cloud/files/${r.cid}`;return m.NextResponse.json(a,{status:200})}catch(t){return console.log(t),m.NextResponse.json({error:"Internal Server Error"},{status:500})}}var tD=t.i(6906);let tG=new e.AppRouteRouteModule({definition:{kind:r.RouteKind.APP_ROUTE,page:"/(routes)/api/upload/route",pathname:"/api/upload",filename:"route",bundlePath:""},distDir:".next",relativeProjectDir:"",resolvedPagePath:"[project]/src/app/(routes)/api/upload/route.ts",nextConfigOutput:"",userland:tD}),{workAsyncStorage:tF,workUnitAsyncStorage:tM,serverHooks:tL}=tG;function tK(){return(0,a.patchFetch)({workAsyncStorage:tF,workUnitAsyncStorage:tM})}async function tW(t,e,a){var m;let y="/(routes)/api/upload/route";y=y.replace(/\/index$/,"")||"/";let T=await tG.prepare(t,e,{srcPage:y,multiZoneDraftMode:!1});if(!T)return e.statusCode=400,e.end("Bad Request"),null==a.waitUntil||a.waitUntil.call(a,Promise.resolve()),null;let{buildId:R,params:$,nextConfig:k,isDraftMode:E,prerenderManifest:H,routerServerContext:U,isOnDemandRevalidate:A,revalidateOnlyGenerated:P,resolvedPathname:_}=T,v=(0,o.normalizeAppPath)(y),O=!!(H.dynamicRoutes[v]||H.routes[_]);if(O&&!E){let t=!!H.routes[_],e=H.dynamicRoutes[v];if(e&&!1===e.fallback&&!t)throw new f.NoFallbackError}let q=null;!O||tG.isDev||E||(q="/index"===(q=_)?"/":q);let b=!0===tG.isDev||!O,S=O&&!b,C=t.method||"GET",j=(0,n.getTracer)(),z=j.getActiveScopeSpan(),x={params:$,prerenderManifest:H,renderOpts:{experimental:{cacheComponents:!!k.experimental.cacheComponents,authInterrupts:!!k.experimental.authInterrupts},supportsDynamicResponse:b,incrementalCache:(0,i.getRequestMeta)(t,"incrementalCache"),cacheLifeProfiles:null==(m=k.experimental)?void 0:m.cacheLife,isRevalidate:S,waitUntil:a.waitUntil,onClose:t=>{e.on("close",t)},onAfterTaskError:void 0,onInstrumentationRequestError:(e,r,a)=>tG.onRequestError(t,e,a,U)},sharedContext:{buildId:R}},J=new s.NodeNextRequest(t),B=new s.NodeNextResponse(e),I=u.NextRequestAdapter.fromNodeNextRequest(J,(0,u.signalFromNodeResponse)(e));try{let o=async r=>tG.handle(I,x).finally(()=>{if(!r)return;r.setAttributes({"http.status_code":e.statusCode,"next.rsc":!1});let a=j.getRootSpanAttributes();if(!a)return;if(a.get("next.span_type")!==c.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${a.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let i=a.get("next.route");if(i){let t=`${C} ${i}`;r.setAttributes({"next.route":i,"http.route":i,"next.span_name":t}),r.updateName(t)}else r.updateName(`${C} ${t.url}`)}),s=async n=>{var s,u;let c=async({previousCacheEntry:r})=>{try{if(!(0,i.getRequestMeta)(t,"minimalMode")&&A&&P&&!r)return e.statusCode=404,e.setHeader("x-nextjs-cache","REVALIDATED"),e.end("This page could not be found"),null;let s=await o(n);t.fetchMetrics=x.renderOpts.fetchMetrics;let u=x.renderOpts.pendingWaitUntil;u&&a.waitUntil&&(a.waitUntil(u),u=void 0);let c=x.renderOpts.collectedTags;if(!O)return await (0,d.sendResponse)(J,B,s,x.renderOpts.pendingWaitUntil),null;{let t=await s.blob(),e=(0,h.toNodeOutgoingHttpHeaders)(s.headers);c&&(e[w.NEXT_CACHE_TAGS_HEADER]=c),!e["content-type"]&&t.type&&(e["content-type"]=t.type);let r=void 0!==x.renderOpts.collectedRevalidate&&!(x.renderOpts.collectedRevalidate>=w.INFINITE_CACHE)&&x.renderOpts.collectedRevalidate,a=void 0===x.renderOpts.collectedExpire||x.renderOpts.collectedExpire>=w.INFINITE_CACHE?void 0:x.renderOpts.collectedExpire;return{value:{kind:g.CachedRouteKind.APP_ROUTE,status:s.status,body:Buffer.from(await t.arrayBuffer()),headers:e},cacheControl:{revalidate:r,expire:a}}}}catch(e){throw(null==r?void 0:r.isStale)&&await tG.onRequestError(t,e,{routerKind:"App Router",routePath:y,routeType:"route",revalidateReason:(0,l.getRevalidateReason)({isRevalidate:S,isOnDemandRevalidate:A})},U),e}},f=await tG.handleResponse({req:t,nextConfig:k,cacheKey:q,routeKind:r.RouteKind.APP_ROUTE,isFallback:!1,prerenderManifest:H,isRoutePPREnabled:!1,isOnDemandRevalidate:A,revalidateOnlyGenerated:P,responseGenerator:c,waitUntil:a.waitUntil});if(!O)return null;if((null==f||null==(s=f.value)?void 0:s.kind)!==g.CachedRouteKind.APP_ROUTE)throw Object.defineProperty(Error(`Invariant: app-route received invalid cache entry ${null==f||null==(u=f.value)?void 0:u.kind}`),"__NEXT_ERROR_CODE",{value:"E701",enumerable:!1,configurable:!0});(0,i.getRequestMeta)(t,"minimalMode")||e.setHeader("x-nextjs-cache",A?"REVALIDATED":f.isMiss?"MISS":f.isStale?"STALE":"HIT"),E&&e.setHeader("Cache-Control","private, no-cache, no-store, max-age=0, must-revalidate");let m=(0,h.fromNodeOutgoingHttpHeaders)(f.value.headers);return(0,i.getRequestMeta)(t,"minimalMode")&&O||m.delete(w.NEXT_CACHE_TAGS_HEADER),!f.cacheControl||e.getHeader("Cache-Control")||m.get("Cache-Control")||m.set("Cache-Control",(0,p.getCacheControlHeader)(f.cacheControl)),await (0,d.sendResponse)(J,B,new Response(f.value.body,{headers:m,status:f.value.status||200})),null};z?await s(z):await j.withPropagatedContext(t.headers,()=>j.trace(c.BaseServerSpan.handleRequest,{spanName:`${C} ${t.url}`,kind:n.SpanKind.SERVER,attributes:{"http.method":C,"http.target":t.url}},s))}catch(e){if(z||e instanceof f.NoFallbackError||await tG.onRequestError(t,e,{routerKind:"App Router",routePath:v,routeType:"route",revalidateReason:(0,l.getRevalidateReason)({isRevalidate:S,isOnDemandRevalidate:A})}),O)throw e;return await (0,d.sendResponse)(J,B,new Response(null,{status:500})),null}}}];

//# sourceMappingURL=node_modules_next_dist_esm_build_templates_app-route_0db29efa.js.map