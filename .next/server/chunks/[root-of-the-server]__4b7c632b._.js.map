{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/lib/notifications/broadcaster.ts"],"sourcesContent":["// server-only module\nimport EventEmitter from \"events\";\n\nconst broadcaster = new EventEmitter();\n\n// Increase default max listeners to avoid warnings in dev\nbroadcaster.setMaxListeners(100);\n\nexport { broadcaster };\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;;AACrB;;AAEA,MAAM,cAAc,IAAI,gHAAY;AAEpC,0DAA0D;AAC1D,YAAY,eAAe,CAAC","debugId":null}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///Users/Jona/Desktop/instagram-clone/src/app/%28routes%29/api/notifications/stream/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { broadcaster } from \"@/lib/notifications/broadcaster\";\n\nexport const runtime = \"nodejs\"; // ensure Node runtime if you need it\n\nexport async function GET(req: Request) {\n  const headers = new Headers({\n    \"Content-Type\": \"text/event-stream\",\n    \"Cache-Control\": \"no-cache, no-transform\",\n    Connection: \"keep-alive\",\n  });\n\n  const encoder = new TextEncoder();\n\n  const stream = new ReadableStream({\n    start(controller) {\n      const onNotify = (payload: any) => {\n        // SSE message: event: notification\\ndata: {...}\\n\\n\n        const data = `event: notification\\ndata: ${JSON.stringify(payload)}\\n\\n`;\n        controller.enqueue(encoder.encode(data));\n      };\n\n      // keep the connection alive: send a comment every 15s\n      const keepAlive = setInterval(() => {\n        controller.enqueue(encoder.encode(\":\\n\\n\"));\n      }, 15000);\n\n      broadcaster.on(\"notify\", onNotify);\n\n      // cancel is called when client disconnects\n      this.cancel = () => {\n        broadcaster.off(\"notify\", onNotify);\n        clearInterval(keepAlive);\n        try { controller.close(); } catch (e) {}\n      };\n      console.log('Consection Esablished')\n    },\n    cancel() {\n      // fallback cancellation (already bound in start)\n    },\n  });\n\n  return new Response(stream, { headers });\n}\n"],"names":[],"mappings":";;;;;;AACA;;AAEO,MAAM,UAAU,UAAU,qCAAqC;AAE/D,eAAe,IAAI,GAAY;IACpC,MAAM,UAAU,IAAI,QAAQ;QAC1B,gBAAgB;QAChB,iBAAiB;QACjB,YAAY;IACd;IAEA,MAAM,UAAU,IAAI;IAEpB,MAAM,SAAS,IAAI,eAAe;QAChC,OAAM,UAAU;YACd,MAAM,WAAW,CAAC;gBAChB,oDAAoD;gBACpD,MAAM,OAAO,CAAC,2BAA2B,EAAE,KAAK,SAAS,CAAC,SAAS,IAAI,CAAC;gBACxE,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC;YACpC;YAEA,sDAAsD;YACtD,MAAM,YAAY,YAAY;gBAC5B,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC;YACpC,GAAG;YAEH,2JAAW,CAAC,EAAE,CAAC,UAAU;YAEzB,2CAA2C;YAC3C,IAAI,CAAC,MAAM,GAAG;gBACZ,2JAAW,CAAC,GAAG,CAAC,UAAU;gBAC1B,cAAc;gBACd,IAAI;oBAAE,WAAW,KAAK;gBAAI,EAAE,OAAO,GAAG,CAAC;YACzC;YACA,QAAQ,GAAG,CAAC;QACd;QACA;QACE,iDAAiD;QACnD;IACF;IAEA,OAAO,IAAI,SAAS,QAAQ;QAAE;IAAQ;AACxC","debugId":null}}]
}