{"version":3,"sources":["turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js","turbopack:///[project]/src/app/(routes)/api/upload/route.ts","turbopack:///[project]/node_modules/pinata/src/utils/custom-errors.ts","turbopack:///[project]/node_modules/next/dist/src/build/templates/app-route.ts","turbopack:///[project]/src/config.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/analytics/analyticsDateInterval.ts","turbopack:///[project]/node_modules/pinata/src/utils/gateway-tools.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/analytics/analyticsTopUsage.ts","turbopack:///[project]/node_modules/pinata/src/utils/resumable.ts","turbopack:///[project]/node_modules/pinata/src/utils/format-config.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/authentication/testAuthentication.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/delete.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/deleteFileVectors.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/deleteSwap.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/list.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/pinnedFileUsage.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/swapCid.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/swapHistory.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/totalStorageUsage.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/updateFile.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/vectorizeFile.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/vectorizeQuery.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/queue.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/deletePinRequest.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/gateway/getCid.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/gateway/convertIPFSUrl.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/gateway/createAccessLink.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/groups/addToGroup.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/groups/createGroup.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/groups/deleteGroup.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/groups/getGroup.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/groups/listGroups.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/groups/removeFromGroup.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/groups/updateGroup.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/keys/createKey.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/keys/listKeys.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/keys/revokeKeys.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/uploads/base64.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/uploads/createSignedUploadURL.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/uploads/file.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/uploads/fileArray.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/uploads/json.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/uploads/url.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/uploads/cid.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/analytics/Analytics.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/analytics/utils.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/analytics/AnalyticsFilter.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/analytics/AnalyticsBandwidth.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/analytics/AnalyticsBuilder.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/analytics/AnalyticsRequests.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/analytics/TimeIntervalAnalyticsBuilder.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/groups/GroupsFilter.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/groups/PublicGroups.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/groups/PrivateGroups.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/groups/Groups.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/keys/Keys.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/keys/FilterKeys.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/gateways/Gateways.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/gateways/OptimizeImageCreateSignedUrl.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/gateways/OptimizeImageGetCid.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/gateways/PrivateGateways.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/gateways/PublicGateways.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/files/getFile.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/files/FilterFiles.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/files/FilterQueue.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/files/PublicFiles.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/files/PrivateFiles.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/files/Files.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/uploads/UploadBuilder.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/uploads/PublicUpload.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/uploads/PrivateUpload.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/uploads/Upload.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/signatures/addSignature.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/signatures/getSignature.ts","turbopack:///[project]/node_modules/pinata/src/core/functions/signatures/removeSignature.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/signatures/PublicSignatures.ts","turbopack:///[project]/node_modules/pinata/src/core/classes/signatures/Signatures.ts","turbopack:///[project]/node_modules/pinata/src/core/pinataSDK.ts"],"sourcesContent":["import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/(routes)/api/upload/route\",\n        pathname: \"/api/upload\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/src/app/(routes)/api/upload/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/(routes)/api/upload/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","import { NextResponse, type NextRequest } from \"next/server\";\nimport { pinata } from \"@/config\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.formData();\n    const file: File | null = data.get(\"file\") as unknown as File;\n    const uploadData = await pinata.upload.public\n        .file(file)\n        .group(\"9b39441e-55e4-4b46-8a27-33b06be198cd\");\n    const fileUrl = `https://${process.env.NEXT_PUBLIC_PINATA_GATEWAY_URL}/files/${uploadData.cid}`;\n    return NextResponse.json(fileUrl, { status: 200 });\n  } catch (e) {\n    console.log(e);\n    return NextResponse.json(\n      { error: \"Internal Server Error\" },\n      { status: 500 }\n    );\n  }\n}","interface ErrorDetails {\n\terror?: string;\n\tcode?: string;\n\tmetadata?: Record<string, any>;\n}\n\nexport class PinataError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\tpublic statusCode?: number,\n\t\tpublic details?: ErrorDetails,\n\t) {\n\t\tsuper(message);\n\t\tthis.name = \"PinataError\";\n\t}\n}\n\nexport class NetworkError extends PinataError {\n\tconstructor(message: string, statusCode?: number, details?: ErrorDetails) {\n\t\tsuper(message, statusCode, details);\n\t\tthis.name = \"NetworkError\";\n\t}\n}\n\nexport class AuthenticationError extends PinataError {\n\tconstructor(message: string, statusCode?: number, details?: ErrorDetails) {\n\t\tsuper(message, statusCode, details);\n\t\tthis.name = \"AuthenticationError\";\n\t}\n}\n\nexport class ValidationError extends PinataError {\n\tconstructor(message: string, details?: ErrorDetails) {\n\t\tsuper(message, undefined, details);\n\t\tthis.name = \"ValidationError\";\n\t}\n}\n","import {\n  AppRouteRouteModule,\n  type AppRouteRouteHandlerContext,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\nimport type { IncomingMessage, ServerResponse } from 'node:http'\nimport { getRequestMeta } from '../../server/request-meta'\nimport { getTracer, type Span, SpanKind } from '../../server/lib/trace/tracer'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport {\n  NextRequestAdapter,\n  signalFromNodeResponse,\n} from '../../server/web/spec-extension/adapters/next-request'\nimport { BaseServerSpan } from '../../server/lib/trace/constants'\nimport { getRevalidateReason } from '../../server/instrumentation/utils'\nimport { sendResponse } from '../../server/send-response'\nimport {\n  fromNodeOutgoingHttpHeaders,\n  toNodeOutgoingHttpHeaders,\n} from '../../server/web/utils'\nimport { getCacheControlHeader } from '../../server/lib/cache-control'\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from '../../lib/constants'\nimport { NoFallbackError } from '../../shared/lib/no-fallback-error.external'\nimport {\n  CachedRouteKind,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n} from '../../server/response-cache'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n  relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n\nexport async function handler(\n  req: IncomingMessage,\n  res: ServerResponse,\n  ctx: {\n    waitUntil: (prom: Promise<void>) => void\n  }\n) {\n  let srcPage = 'VAR_DEFINITION_PAGE'\n\n  // turbopack doesn't normalize `/index` in the page name\n  // so we need to to process dynamic routes properly\n  // TODO: fix turbopack providing differing value from webpack\n  if (process.env.TURBOPACK) {\n    srcPage = srcPage.replace(/\\/index$/, '') || '/'\n  } else if (srcPage === '/index') {\n    // we always normalize /index specifically\n    srcPage = '/'\n  }\n  const multiZoneDraftMode = process.env\n    .__NEXT_MULTI_ZONE_DRAFT_MODE as any as boolean\n\n  const prepareResult = await routeModule.prepare(req, res, {\n    srcPage,\n    multiZoneDraftMode,\n  })\n\n  if (!prepareResult) {\n    res.statusCode = 400\n    res.end('Bad Request')\n    ctx.waitUntil?.(Promise.resolve())\n    return null\n  }\n\n  const {\n    buildId,\n    params,\n    nextConfig,\n    isDraftMode,\n    prerenderManifest,\n    routerServerContext,\n    isOnDemandRevalidate,\n    revalidateOnlyGenerated,\n    resolvedPathname,\n  } = prepareResult\n\n  const normalizedSrcPage = normalizeAppPath(srcPage)\n\n  let isIsr = Boolean(\n    prerenderManifest.dynamicRoutes[normalizedSrcPage] ||\n      prerenderManifest.routes[resolvedPathname]\n  )\n\n  if (isIsr && !isDraftMode) {\n    const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname])\n    const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage]\n\n    if (prerenderInfo) {\n      if (prerenderInfo.fallback === false && !isPrerendered) {\n        throw new NoFallbackError()\n      }\n    }\n  }\n\n  let cacheKey: string | null = null\n\n  if (isIsr && !routeModule.isDev && !isDraftMode) {\n    cacheKey = resolvedPathname\n    // ensure /index and / is normalized to one key\n    cacheKey = cacheKey === '/index' ? '/' : cacheKey\n  }\n\n  const supportsDynamicResponse: boolean =\n    // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true ||\n    // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr\n\n  // This is a revalidation request if the request is for a static\n  // page and it is not being resumed from a postponed render and\n  // it is not a dynamic RSC request then it is a revalidation\n  // request.\n  const isRevalidate = isIsr && !supportsDynamicResponse\n\n  const method = req.method || 'GET'\n  const tracer = getTracer()\n  const activeSpan = tracer.getActiveScopeSpan()\n\n  const context: AppRouteRouteHandlerContext = {\n    params,\n    prerenderManifest,\n    renderOpts: {\n      experimental: {\n        cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n        authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n      },\n      supportsDynamicResponse,\n      incrementalCache: getRequestMeta(req, 'incrementalCache'),\n      cacheLifeProfiles: nextConfig.experimental?.cacheLife,\n      isRevalidate,\n      waitUntil: ctx.waitUntil,\n      onClose: (cb) => {\n        res.on('close', cb)\n      },\n      onAfterTaskError: undefined,\n      onInstrumentationRequestError: (error, _request, errorContext) =>\n        routeModule.onRequestError(\n          req,\n          error,\n          errorContext,\n          routerServerContext\n        ),\n    },\n    sharedContext: {\n      buildId,\n    },\n  }\n  const nodeNextReq = new NodeNextRequest(req)\n  const nodeNextRes = new NodeNextResponse(res)\n\n  const nextReq = NextRequestAdapter.fromNodeNextRequest(\n    nodeNextReq,\n    signalFromNodeResponse(res)\n  )\n\n  try {\n    const invokeRouteModule = async (span?: Span) => {\n      return routeModule.handle(nextReq, context).finally(() => {\n        if (!span) return\n\n        span.setAttributes({\n          'http.status_code': res.statusCode,\n          'next.rsc': false,\n        })\n\n        const rootSpanAttributes = tracer.getRootSpanAttributes()\n        // We were unable to get attributes, probably OTEL is not enabled\n        if (!rootSpanAttributes) {\n          return\n        }\n\n        if (\n          rootSpanAttributes.get('next.span_type') !==\n          BaseServerSpan.handleRequest\n        ) {\n          console.warn(\n            `Unexpected root span type '${rootSpanAttributes.get(\n              'next.span_type'\n            )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n          )\n          return\n        }\n\n        const route = rootSpanAttributes.get('next.route')\n        if (route) {\n          const name = `${method} ${route}`\n\n          span.setAttributes({\n            'next.route': route,\n            'http.route': route,\n            'next.span_name': name,\n          })\n          span.updateName(name)\n        } else {\n          span.updateName(`${method} ${req.url}`)\n        }\n      })\n    }\n\n    const handleResponse = async (currentSpan?: Span) => {\n      const responseGenerator: ResponseGenerator = async ({\n        previousCacheEntry,\n      }) => {\n        try {\n          if (\n            !getRequestMeta(req, 'minimalMode') &&\n            isOnDemandRevalidate &&\n            revalidateOnlyGenerated &&\n            !previousCacheEntry\n          ) {\n            res.statusCode = 404\n            // on-demand revalidate always sets this header\n            res.setHeader('x-nextjs-cache', 'REVALIDATED')\n            res.end('This page could not be found')\n            return null\n          }\n\n          const response = await invokeRouteModule(currentSpan)\n\n          ;(req as any).fetchMetrics = (context.renderOpts as any).fetchMetrics\n          let pendingWaitUntil = context.renderOpts.pendingWaitUntil\n\n          // Attempt using provided waitUntil if available\n          // if it's not we fallback to sendResponse's handling\n          if (pendingWaitUntil) {\n            if (ctx.waitUntil) {\n              ctx.waitUntil(pendingWaitUntil)\n              pendingWaitUntil = undefined\n            }\n          }\n          const cacheTags = context.renderOpts.collectedTags\n\n          // If the request is for a static response, we can cache it so long\n          // as it's not edge.\n          if (isIsr) {\n            const blob = await response.blob()\n\n            // Copy the headers from the response.\n            const headers = toNodeOutgoingHttpHeaders(response.headers)\n\n            if (cacheTags) {\n              headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n            }\n\n            if (!headers['content-type'] && blob.type) {\n              headers['content-type'] = blob.type\n            }\n\n            const revalidate =\n              typeof context.renderOpts.collectedRevalidate === 'undefined' ||\n              context.renderOpts.collectedRevalidate >= INFINITE_CACHE\n                ? false\n                : context.renderOpts.collectedRevalidate\n\n            const expire =\n              typeof context.renderOpts.collectedExpire === 'undefined' ||\n              context.renderOpts.collectedExpire >= INFINITE_CACHE\n                ? undefined\n                : context.renderOpts.collectedExpire\n\n            // Create the cache entry for the response.\n            const cacheEntry: ResponseCacheEntry = {\n              value: {\n                kind: CachedRouteKind.APP_ROUTE,\n                status: response.status,\n                body: Buffer.from(await blob.arrayBuffer()),\n                headers,\n              },\n              cacheControl: { revalidate, expire },\n            }\n\n            return cacheEntry\n          } else {\n            // send response without caching if not ISR\n            await sendResponse(\n              nodeNextReq,\n              nodeNextRes,\n              response,\n              context.renderOpts.pendingWaitUntil\n            )\n            return null\n          }\n        } catch (err) {\n          // if this is a background revalidate we need to report\n          // the request error here as it won't be bubbled\n          if (previousCacheEntry?.isStale) {\n            await routeModule.onRequestError(\n              req,\n              err,\n              {\n                routerKind: 'App Router',\n                routePath: srcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                  isRevalidate,\n                  isOnDemandRevalidate,\n                }),\n              },\n              routerServerContext\n            )\n          }\n          throw err\n        }\n      }\n\n      const cacheEntry = await routeModule.handleResponse({\n        req,\n        nextConfig,\n        cacheKey,\n        routeKind: RouteKind.APP_ROUTE,\n        isFallback: false,\n        prerenderManifest,\n        isRoutePPREnabled: false,\n        isOnDemandRevalidate,\n        revalidateOnlyGenerated,\n        responseGenerator,\n        waitUntil: ctx.waitUntil,\n      })\n\n      // we don't create a cacheEntry for ISR\n      if (!isIsr) {\n        return null\n      }\n\n      if (cacheEntry?.value?.kind !== CachedRouteKind.APP_ROUTE) {\n        throw new Error(\n          `Invariant: app-route received invalid cache entry ${cacheEntry?.value?.kind}`\n        )\n      }\n\n      if (!getRequestMeta(req, 'minimalMode')) {\n        res.setHeader(\n          'x-nextjs-cache',\n          isOnDemandRevalidate\n            ? 'REVALIDATED'\n            : cacheEntry.isMiss\n              ? 'MISS'\n              : cacheEntry.isStale\n                ? 'STALE'\n                : 'HIT'\n        )\n      }\n\n      // Draft mode should never be cached\n      if (isDraftMode) {\n        res.setHeader(\n          'Cache-Control',\n          'private, no-cache, no-store, max-age=0, must-revalidate'\n        )\n      }\n\n      const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers)\n\n      if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n        headers.delete(NEXT_CACHE_TAGS_HEADER)\n      }\n\n      // If cache control is already set on the response we don't\n      // override it to allow users to customize it via next.config\n      if (\n        cacheEntry.cacheControl &&\n        !res.getHeader('Cache-Control') &&\n        !headers.get('Cache-Control')\n      ) {\n        headers.set(\n          'Cache-Control',\n          getCacheControlHeader(cacheEntry.cacheControl)\n        )\n      }\n\n      await sendResponse(\n        nodeNextReq,\n        nodeNextRes,\n        new Response(cacheEntry.value.body, {\n          headers,\n          status: cacheEntry.value.status || 200,\n        })\n      )\n      return null\n    }\n\n    // TODO: activeSpan code path is for when wrapped by\n    // next-server can be removed when this is no longer used\n    if (activeSpan) {\n      await handleResponse(activeSpan)\n    } else {\n      await tracer.withPropagatedContext(req.headers, () =>\n        tracer.trace(\n          BaseServerSpan.handleRequest,\n          {\n            spanName: `${method} ${req.url}`,\n            kind: SpanKind.SERVER,\n            attributes: {\n              'http.method': method,\n              'http.target': req.url,\n            },\n          },\n          handleResponse\n        )\n      )\n    }\n  } catch (err) {\n    // if we aren't wrapped by base-server handle here\n    if (!activeSpan && !(err instanceof NoFallbackError)) {\n      await routeModule.onRequestError(req, err, {\n        routerKind: 'App Router',\n        routePath: normalizedSrcPage,\n        routeType: 'route',\n        revalidateReason: getRevalidateReason({\n          isRevalidate,\n          isOnDemandRevalidate,\n        }),\n      })\n    }\n\n    // rethrow so that we can handle serving error page\n\n    // If this is during static generation, throw the error again.\n    if (isIsr) throw err\n\n    // Otherwise, send a 500 response.\n    await sendResponse(\n      nodeNextReq,\n      nodeNextRes,\n      new Response(null, { status: 500 })\n    )\n    return null\n  }\n}\n","import { PinataSDK } from \"pinata\"\n\nexport const pinata = new PinataSDK({\n  pinataJwt: `${process.env.PINATA_JWT}`,\n  pinataGateway: `${process.env.NEXT_PUBLIC_PINATA_GATEWAY_URL}`\n})","import type {\n\tTimeIntervalAnalyticsQuery,\n\tTimeIntervalAnalyticsResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const analyticsDateInterval = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: TimeIntervalAnalyticsQuery,\n): Promise<TimeIntervalAnalyticsResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst {\n\t\t\tcid,\n\t\t\tgateway_domain,\n\t\t\tstart_date,\n\t\t\tend_date,\n\t\t\tfile_name,\n\t\t\tuser_agent,\n\t\t\tcountry,\n\t\t\tregion,\n\t\t\treferer,\n\t\t\tlimit,\n\t\t\tsort_order,\n\t\t\tdate_interval,\n\t\t\tsort_by,\n\t\t} = options;\n\n\t\tif (cid) params.append(\"cid\", cid);\n\t\tif (gateway_domain) params.append(\"gateway_domain\", gateway_domain);\n\t\tif (start_date) params.append(\"start_date\", start_date);\n\t\tif (end_date) params.append(\"end_date\", end_date);\n\t\tif (file_name) params.append(\"file_name\", file_name);\n\t\tif (user_agent) params.append(\"user_agent\", user_agent.toString());\n\t\tif (country) params.append(\"country\", country.toString());\n\t\tif (region) params.append(\"region\", region);\n\t\tif (referer) params.append(\"referer\", referer.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (sort_order) params.append(\"sort_order\", sort_order);\n\t\tif (sort_by) params.append(\"sort_by\", sort_by);\n\t\tif (date_interval) params.append(\"by\", date_interval);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/ipfs/gateway_analytics_time_series?${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = { ...config.customHeaders };\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/analyticsDateInterval\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: TimeIntervalAnalyticsResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing anaytics usage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching gateway usage\",\n\t\t);\n\t}\n};\n","import { ContainsCIDResponse } from \"../core/types\";\n\nfunction isValidCIDv0(cid: string): boolean {\n\t// CIDv0 is a 46-character base58-encoded string starting with \"Qm\"\n\treturn /^Qm[1-9A-HJ-NP-Za-km-z]{44}$/.test(cid);\n}\n\nfunction isValidCIDv1(cid: string): boolean {\n\t// CIDv1 typically starts with \"b\" and uses base32 encoding\n\treturn /^b[a-z2-7]{58,}$/.test(cid);\n}\n\nfunction isCID(str: string): boolean {\n\t// Remove any leading/trailing whitespace\n\tstr = str.trim();\n\treturn isValidCIDv0(str) || isValidCIDv1(str);\n}\n\nexport async function containsCID(input: string): Promise<ContainsCIDResponse> {\n\tif (typeof input !== \"string\") {\n\t\tthrow new Error(\"Input is not a string\");\n\t}\n\n\t// Helper function to check if a string starts with a CID\n\tconst startsWithCID = (str: string) => {\n\t\tconst parts = str.split(\"/\");\n\t\treturn isCID(parts[0]) ? parts[0] : null;\n\t};\n\n\t// Check if the input itself is a CID or starts with a CID\n\tconst directCID = startsWithCID(input);\n\tif (directCID) {\n\t\treturn {\n\t\t\tcontainsCid: true,\n\t\t\tcid: directCID,\n\t\t};\n\t}\n\n\tlet url: URL;\n\ttry {\n\t\t// Try to parse the input as a URL\n\t\turl = new URL(input);\n\t} catch (error) {\n\t\t// If parsing fails, treat the input as a potential path-like string\n\t\tconst parts = input.split(/\\/|\\?/);\n\t\tfor (const part of parts) {\n\t\t\tconst cid = startsWithCID(part);\n\t\t\tif (cid) {\n\t\t\t\treturn {\n\t\t\t\t\tcontainsCid: true,\n\t\t\t\t\tcid: cid,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tcontainsCid: false,\n\t\t\tcid: null,\n\t\t};\n\t}\n\n\t// Check for CID in subdomain\n\tconst subdomains = url.hostname.split(\".\");\n\tfor (const subdomain of subdomains) {\n\t\tif (isCID(subdomain)) {\n\t\t\treturn {\n\t\t\t\tcontainsCid: true,\n\t\t\t\tcid: subdomain,\n\t\t\t};\n\t\t}\n\t}\n\n\t// Check for CID in path\n\tconst pathParts = url.pathname.split(\"/\");\n\tfor (const part of pathParts) {\n\t\tconst cid = startsWithCID(part);\n\t\tif (cid) {\n\t\t\treturn {\n\t\t\t\tcontainsCid: true,\n\t\t\t\tcid: cid,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tcontainsCid: false,\n\t\tcid: null,\n\t};\n}\n\nexport async function convertToDesiredGateway(\n\tsourceUrl: string,\n\tdesiredGatewayPrefix: string | undefined,\n) {\n\tconst results = await containsCID(sourceUrl);\n\n\tif (results.containsCid !== true) {\n\t\tthrow new Error(\"url does not contain CID\");\n\t}\n\n\tif (!sourceUrl.startsWith(\"https\") && !sourceUrl.startsWith(\"ipfs://\")) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${sourceUrl}`;\n\t}\n\n\tconst urlObj = new URL(sourceUrl);\n\tconst path = urlObj.pathname + urlObj.search + urlObj.hash;\n\n\t//case 1 - the ipfs://cid path\n\tif (sourceUrl.startsWith(`ipfs://${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n\t}\n\n\t//case 2 - the /ipfs/cid path (this should cover ipfs://ipfs/cid as well)\n\tif (sourceUrl.includes(`/ipfs/${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}${path}`;\n\t}\n\n\t//case 3 - the /ipns/cid path\n\tif (sourceUrl.includes(`/ipns/${results.cid}`)) {\n\t\treturn `${desiredGatewayPrefix}${path}`;\n\t}\n\n\t//case 4 - the CID is in the subdomain\n\tif (urlObj.hostname.includes(results.cid!)) {\n\t\treturn `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n\t}\n\n\t//this is the fallback if no supported patterns are provided\n\tthrow new Error(\n\t\t\"unsupported URL pattern, please submit a github issue with the URL utilized\",\n\t);\n}\n","import type {\n\tTopAnalyticsQuery,\n\tTopAnalyticsItem,\n\tPinataConfig,\n\tTopAnalyticsResponse,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const analyticsTopUsage = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: TopAnalyticsQuery,\n): Promise<TopAnalyticsResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst {\n\t\t\tcid,\n\t\t\tgateway_domain,\n\t\t\tstart_date,\n\t\t\tend_date,\n\t\t\tfile_name,\n\t\t\tuser_agent,\n\t\t\tcountry,\n\t\t\tregion,\n\t\t\treferer,\n\t\t\tlimit,\n\t\t\tsort_order,\n\t\t\tsort_by,\n\t\t\tattribute,\n\t\t} = options;\n\n\t\tconst domain = gateway_domain || config.pinataGateway;\n\t\tif (domain) {\n\t\t\t// Remove 'https://' if present\n\t\t\tconst cleanDomain = domain.replace(/^https?:\\/\\//, \"\");\n\t\t\tparams.append(\"gateway_domain\", cleanDomain);\n\t\t}\n\t\tif (cid) {\n\t\t\tparams.append(\"cid\", cid);\n\t\t}\n\t\tif (start_date) params.append(\"start_date\", start_date);\n\t\tif (end_date) params.append(\"end_date\", end_date);\n\t\tif (file_name) params.append(\"file_name\", file_name);\n\t\tif (user_agent) params.append(\"user_agent\", user_agent.toString());\n\t\tif (country) params.append(\"country\", country.toString());\n\t\tif (region) params.append(\"region\", region);\n\t\tif (referer) params.append(\"referer\", referer.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (sort_order) params.append(\"sort_order\", sort_order);\n\t\tif (sort_by) params.append(\"sort_by\", sort_by);\n\t\tif (attribute) params.append(\"by\", attribute);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/ipfs/gateway_analytics_top?${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = { ...config.customHeaders };\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/analyticsTopUsage\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: TopAnalyticsResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing anaytics usage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching gateway usage\",\n\t\t);\n\t}\n};\n","import { NetworkError } from \"./custom-errors\";\n\nexport function getFileIdFromUrl(url: string): string {\n\tconst match = url.match(/\\/files\\/([^\\/]+)/);\n\tif (match && match[1]) {\n\t\treturn match[1];\n\t}\n\tthrow new NetworkError(\"File ID not found in URL\", 400, {\n\t\terror: \"File ID not found in URL\",\n\t\tcode: \"HTTP_ERROR\",\n\t\tmetadata: {\n\t\t\trequestUrl: url,\n\t\t},\n\t});\n}\n","import { PinataConfig } from \"../core/types\";\n\nexport const formatConfig = (config: PinataConfig | undefined) => {\n\tlet gateway = config?.pinataGateway;\n\tif (config && gateway) {\n\t\tif (gateway && !gateway.startsWith(\"https://\")) {\n\t\t\tgateway = `https://${gateway}`;\n\t\t}\n\t\tconfig.pinataGateway = gateway;\n\t}\n\treturn config;\n};\n","import type { PinataConfig } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const testAuthentication = async (config: PinataConfig | undefined) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/testAuthentication\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/testAuthentication`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: string = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing authentication: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while testing authentication\",\n\t\t);\n\t}\n};\n","import type { PinataConfig, DeleteResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nconst wait = (milliseconds: number): Promise<void> => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, milliseconds);\n\t});\n};\n\nexport const deleteFile = async (\n\tconfig: PinataConfig | undefined,\n\tfiles: string[],\n\tprivacy: \"public\" | \"private\",\n): Promise<DeleteResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst responses: DeleteResponse[] = [];\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/deleteFile\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const id of files) {\n\t\ttry {\n\t\t\tconst response = await fetch(`${endpoint}/files/${privacy}/${id}`, {\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.text();\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error`, response.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: response.statusText,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error deleting file ${id}: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while deleting file ${id}`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\treturn responses;\n};\n","import type { PinataConfig, VectorizeFileResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const deleteFileVectors = async (\n\tconfig: PinataConfig | undefined,\n\tfileId: string,\n): Promise<VectorizeFileResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/vectorizeFile\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/vectorize/files/${fileId}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: VectorizeFileResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing vectorize file: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while vectorizing file\");\n\t}\n};\n","import type { SwapCidResponse, PinataConfig } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const deleteSwap = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\tnetwork: \"public\" | \"private\",\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/deleteSwap\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/${network}/swap/${cid}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(`Authentication failed`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"Unauthorized CID Swap Deletion\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"UNAUTHORIZED\",\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\"CID not pinned to account\", request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"NOT_FOUND\",\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error occurred`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"NETWORK_ERROR\",\n\t\t\t});\n\t\t}\n\n\t\treturn request.statusText;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing deleteSwap: ${error.message}`,\n\t\t\t\tundefined,\n\t\t\t\t{\n\t\t\t\t\tcode: \"DELETE_SWAP_ERROR\",\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while deleting swap\",\n\t\t\tundefined,\n\t\t\t{\n\t\t\t\tcode: \"UNKNOWN_ERROR\",\n\t\t\t},\n\t\t);\n\t}\n};\n","import type {\n\tFileListQuery,\n\tFileListResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const listFiles = async (\n\tconfig: PinataConfig | undefined,\n\tprivacy: \"private\" | \"public\",\n\toptions?: FileListQuery,\n): Promise<FileListResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst {\n\t\t\tname,\n\t\t\tgroup,\n\t\t\tcid,\n\t\t\torder,\n\t\t\tlimit,\n\t\t\tmimeType,\n\t\t\tpageToken,\n\t\t\tcidPending,\n\t\t\tmetadata,\n\t\t\tnoGroup,\n\t\t} = options;\n\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (name) params.append(\"name\", name);\n\t\tif (group) params.append(\"group\", group);\n\t\tif (cid) params.append(\"cid\", cid);\n\t\tif (mimeType) params.append(\"mimeType\", mimeType);\n\t\tif (order) params.append(\"order\", order);\n\t\tif (pageToken) params.append(\"pageToken\", pageToken);\n\t\tif (cidPending) params.append(\"cidPending\", \"true\");\n\t\tif (noGroup) params.append(\"group\", \"null\");\n\t\tif (metadata && typeof metadata === \"object\") {\n\t\t\tObject.entries(metadata).forEach(([key, value]) => {\n\t\t\t\tparams.append(`keyvalues[${key.toString()}]`, value.toString());\n\t\t\t});\n\t\t}\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/files/${privacy}?${params.toString()}`;\n\n\ttry {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\t...config.customHeaders,\n\t\t\t};\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\tSource: \"sdk/listFiles\",\n\t\t\t};\n\t\t}\n\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: FileListResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing list files: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing files\");\n\t}\n};\n","import type { PinataConfig, UserPinnedDataResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const pinnedFileCount = async (\n\tconfig: PinataConfig | undefined,\n): Promise<number> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/pinnedFileUsage\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst res: UserPinnedDataResponse = await request.json();\n\t\treturn res.pin_count;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing pinnedFileUsage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting pinned file usage\",\n\t\t);\n\t}\n};\n","import type {\n\tSwapCidOptions,\n\tSwapCidResponse,\n\tPinataConfig,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const swapCid = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SwapCidOptions,\n\tnetwork: \"public\" | \"private\",\n): Promise<SwapCidResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tswap_cid: options.swapCid,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/swapCid\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/swap/${options.cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\"Unauthorized CID Swap\", request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\"CID not pinned to account\", request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: SwapCidResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing CID Swap: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while swapping CID\");\n\t}\n};\n","import type {\n\tSwapCidResponse,\n\tPinataConfig,\n\tSwapHistoryOptions,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const swapHistory = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SwapHistoryOptions,\n\tnetwork: \"public\" | \"private\",\n): Promise<SwapCidResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/swapHistory\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/swap/${options.cid}?domain=${options.domain}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 404) {\n\t\t\t\tthrow new PinataError(\"CID does not have history\", request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: SwapCidResponse[] = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error fetching swap history: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching swap history\",\n\t\t);\n\t}\n};\n","import type { PinataConfig, UserPinnedDataResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const totalStorageUsage = async (\n\tconfig: PinataConfig | undefined,\n): Promise<number> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/totalStorageUsage\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst res: UserPinnedDataResponse = await request.json();\n\t\treturn res.pin_size_total;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing totalStorageUsage: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting total storage usage\",\n\t\t);\n\t}\n};\n","import type {\n\tFileListItem,\n\tPinataConfig,\n\tUpdateFileOptions,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const updateFile = async (\n\tconfig: PinataConfig | undefined,\n\toptions: UpdateFileOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<FileListItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tif (\n\t\t!options.name &&\n\t\t(!options.keyvalues || Object.keys(options.keyvalues).length === 0)\n\t) {\n\t\tthrow new ValidationError(\n\t\t\t\"At least one of 'name' or 'keyvalues' must be provided\",\n\t\t);\n\t}\n\n\tconst data: Record<string, any> = {};\n\n\tif (options.name !== undefined) {\n\t\tdata.name = options.name;\n\t}\n\tif (options.keyvalues && Object.keys(options.keyvalues).length > 0) {\n\t\tdata.keyvalues = options.keyvalues;\n\t}\n\n\tconst body = JSON.stringify(data);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/updateMetadata\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/${privacy}/${options.id}`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: headers,\n\t\t\tbody: body,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: FileListItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing updateFile: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while updating file\");\n\t}\n};\n","import type { PinataConfig, VectorizeFileResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const vectorizeFile = async (\n\tconfig: PinataConfig | undefined,\n\tfileId: string,\n): Promise<VectorizeFileResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/vectorizeFile\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/vectorize/files/${fileId}`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: VectorizeFileResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing vectorize file: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while vectorizing file\");\n\t}\n};\n","import type {\n\tGetCIDResponse,\n\tPinataConfig,\n\tVectorizeQuery,\n\tVectorizeQueryResponse,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nimport { getCid } from \"../../functions\";\n\nexport const vectorizeQuery = async (\n\tconfig: PinataConfig | undefined,\n\toptions: VectorizeQuery,\n): Promise<VectorizeQueryResponse | GetCIDResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/vectorQuery\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tconst body = JSON.stringify({\n\t\ttext: options.query,\n\t});\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/vectorize/groups/${options.groupId}/query`,\n\t\t\t{\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: body,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: VectorizeQueryResponse = res.data;\n\n\t\tif (options.returnFile) {\n\t\t\tif (resData.matches.length === 0) {\n\t\t\t\tthrow new PinataError(`No files returned in query to fetch`);\n\t\t\t}\n\t\t\tconst cid = resData.matches[0].cid;\n\t\t\tconst fileRes: GetCIDResponse = await getCid(config, cid, \"files\");\n\t\t\treturn fileRes;\n\t\t}\n\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing vectorize file: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while vectorizing file\");\n\t}\n};\n","import type {\n\tPinQueueItem,\n\tPinQueueQuery,\n\tPinQueueResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const queue = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: PinQueueQuery,\n): Promise<PinQueueResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst params = new URLSearchParams({\n\t\tincludesCount: \"false\",\n\t});\n\n\tif (options) {\n\t\tconst { cid, status, sort, limit, pageToken } = options;\n\n\t\tif (cid) params.append(\"cid\", cid.toString());\n\t\tif (status) params.append(\"status\", status.toString());\n\t\tif (sort) params.append(\"sort\", sort.toString());\n\t\tif (limit) params.append(\"limit\", limit.toString());\n\t\tif (pageToken) params.append(\"pageToken\", pageToken.toString());\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tconst url = `${endpoint}/files/public/pin_by_cid?${params.toString()}`;\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/pinJobs\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(url, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst res = await request.json();\n\t\tconst resData: PinQueueResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing pinJobs: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing pin jobs\");\n\t}\n};\n","import type { PinataConfig } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const deletePinRequest = async (\n\tconfig: PinataConfig | undefined,\n\tid: string,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/deletePinRequest\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst response = await fetch(`${endpoint}/files/public/pin_by_cid/${id}`, {\n\t\t\tmethod: \"DELETE\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tconst errorData = await response.text();\n\t\t\tif (response.status === 401) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\tresponse.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error`, response.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\treturn \"OK\";\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error deleting pin by request: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while deleting pin by CID request\",\n\t\t);\n\t}\n};\n","import type {\n\tGetCIDResponse,\n\tPinataConfig,\n\tOptimizeImageOptions,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const getCid = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\tgatewayType?: \"ipfs\" | \"files\",\n\toptions?: OptimizeImageOptions,\n): Promise<GetCIDResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet data: JSON | string | Blob;\n\tlet newUrl: string = `${config?.pinataGateway}/${gatewayType}/${cid}`;\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tif (options.width) params.append(\"img-width\", options.width.toString());\n\t\tif (options.height) params.append(\"img-height\", options.height.toString());\n\t\tif (options.dpr) params.append(\"img-dpr\", options.dpr.toString());\n\t\tif (options.fit) params.append(\"img-fit\", options.fit);\n\t\tif (options.gravity) params.append(\"img-gravity\", options.gravity);\n\t\tif (options.quality)\n\t\t\tparams.append(\"img-quality\", options.quality.toString());\n\t\tif (options.format) params.append(\"img-format\", options.format);\n\t\tif (options.animation !== undefined)\n\t\t\tparams.append(\"img-anim\", options.animation.toString());\n\t\tif (options.sharpen)\n\t\t\tparams.append(\"img-sharpen\", options.sharpen.toString());\n\t\tif (options.onError === true) params.append(\"img-onerror\", \"redirect\");\n\t\tif (options.metadata) params.append(\"img-metadata\", options.metadata);\n\t}\n\n\tif (config?.pinataGatewayKey) {\n\t\tparams.append(\"pinataGatewayToken\", config.pinataGatewayKey);\n\t}\n\n\tconst queryString = params.toString();\n\tif (queryString) {\n\t\tnewUrl += `?${queryString}`;\n\t}\n\n\tif (gatewayType === \"ipfs\") {\n\t\tconst request = await fetch(newUrl);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst contentType: string | null =\n\t\t\trequest.headers.get(\"content-type\")?.split(\";\")[0] || null;\n\n\t\tif (contentType?.includes(\"application/json\")) {\n\t\t\tdata = await request.json();\n\t\t} else if (contentType?.includes(\"text/\")) {\n\t\t\tdata = await request.text();\n\t\t} else {\n\t\t\tdata = await request.blob();\n\t\t}\n\n\t\tconst res: GetCIDResponse = {\n\t\t\tdata: data,\n\t\t\tcontentType: contentType,\n\t\t};\n\n\t\treturn res;\n\t}\n\n\tconst date = Math.floor(new Date().getTime() / 1000);\n\n\tconst payload = JSON.stringify({\n\t\turl: newUrl,\n\t\tdate: date,\n\t\texpires: 30,\n\t\tmethod: \"GET\",\n\t});\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/getCid\",\n\t\t};\n\t}\n\n\tconst signedUrlRequest = await fetch(`${endpoint}/files/sign`, {\n\t\tmethod: \"POST\",\n\t\theaders: headers,\n\t\tbody: payload,\n\t});\n\n\tconst signedUrl = await signedUrlRequest.json();\n\n\ttry {\n\t\tconst request = await fetch(signedUrl.data);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst contentType: string | null =\n\t\t\trequest.headers.get(\"content-type\")?.split(\";\")[0] || null;\n\n\t\tif (contentType?.includes(\"application/json\")) {\n\t\t\tdata = await request.json();\n\t\t} else if (contentType?.includes(\"text/\")) {\n\t\t\tdata = await request.text();\n\t\t} else {\n\t\t\tdata = await request.blob();\n\t\t}\n\n\t\tconst res: GetCIDResponse = {\n\t\t\tdata: data,\n\t\t\tcontentType: contentType,\n\t\t};\n\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getCid: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting CID contents\",\n\t\t);\n\t}\n};\n","import { convertToDesiredGateway } from \"../../../utils/gateway-tools\";\nimport type { PinataConfig } from \"../../types\";\n\nexport const convertIPFSUrl = async (\n\tconfig: PinataConfig | undefined,\n\turl: string,\n\tgatewayPrefix?: string,\n): Promise<string> => {\n\tlet newUrl: string;\n\tlet prefix: string =\n\t\tgatewayPrefix || config?.pinataGateway || \"https://gateway.pinata.cloud\";\n\tnewUrl = await convertToDesiredGateway(url, prefix);\n\tif (config?.pinataGatewayKey) {\n\t\t`${newUrl}?pinataGatewayToken=${config?.pinataGatewayKey}`;\n\t}\n\treturn newUrl;\n};\n","import type {\n\tPinataConfig,\n\tOptimizeImageOptions,\n\tAccessLinkOptions,\n} from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const createAccessLink = async (\n\tconfig: PinataConfig | undefined,\n\toptions: AccessLinkOptions,\n\timgOpts: OptimizeImageOptions,\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet baseUrl: string | undefined;\n\n\tif (options?.gateway) {\n\t\tbaseUrl = options.gateway.startsWith(\"https://\")\n\t\t\t? options.gateway\n\t\t\t: `https://${options.gateway}`;\n\t} else {\n\t\tbaseUrl = config.pinataGateway;\n\t}\n\n\tlet newUrl: string = `${baseUrl}/files/${options.cid}`;\n\n\tconst params = new URLSearchParams();\n\n\tif (imgOpts) {\n\t\tif (imgOpts.width) params.append(\"img-width\", imgOpts.width.toString());\n\t\tif (imgOpts.height) params.append(\"img-height\", imgOpts.height.toString());\n\t\tif (imgOpts.dpr) params.append(\"img-dpr\", imgOpts.dpr.toString());\n\t\tif (imgOpts.fit) params.append(\"img-fit\", imgOpts.fit);\n\t\tif (imgOpts.gravity) params.append(\"img-gravity\", imgOpts.gravity);\n\t\tif (imgOpts.quality)\n\t\t\tparams.append(\"img-quality\", imgOpts.quality.toString());\n\t\tif (imgOpts.format) params.append(\"img-format\", imgOpts.format);\n\t\tif (imgOpts.animation !== undefined)\n\t\t\tparams.append(\"img-anim\", imgOpts.animation.toString());\n\t\tif (imgOpts.sharpen)\n\t\t\tparams.append(\"img-sharpen\", imgOpts.sharpen.toString());\n\t\tif (imgOpts.onError === true) params.append(\"img-onerror\", \"redirect\");\n\t\tif (imgOpts.metadata) params.append(\"img-metadata\", imgOpts.metadata);\n\t}\n\n\tconst queryString = params.toString();\n\n\tif (queryString) {\n\t\tnewUrl += `?${queryString}`;\n\t}\n\n\tconst date = options?.date || Math.floor(new Date().getTime() / 1000);\n\n\tconst payload = JSON.stringify({\n\t\turl: newUrl,\n\t\tdate: date,\n\t\texpires: options.expires,\n\t\tmethod: \"GET\",\n\t});\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/createSignURL\",\n\t\t};\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/private/download_link`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: payload,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error processing createSignedURL: ${error.message}`,\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while getting signed url\");\n\t}\n};\n","import type {\n\tGroupCIDOptions,\n\tPinataConfig,\n\tUpdateGroupFilesResponse,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const addToGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupCIDOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<UpdateGroupFilesResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst wait = (milliseconds: number): Promise<void> => {\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(resolve, milliseconds);\n\t\t});\n\t};\n\n\tconst responses: UpdateGroupFilesResponse[] = [];\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/addToGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const id of options.files) {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}/ids/${id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"PUT\",\n\t\t\t\t\theaders: headers,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.text();\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, response.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: response.statusText,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error adding file ${id} to group: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while adding file ${id} to group`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\treturn responses;\n};\n","import type {\n\tPinataConfig,\n\tGroupOptions,\n\tGroupResponseItem,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const createGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tname: options.name,\n\t\tis_public: options.isPublic,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/createGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/groups/${privacy}`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: GroupResponseItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing createGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while creating a group\");\n\t}\n};\n","import type { GetGroupOptions, PinataConfig } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const deleteGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GetGroupOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/deleteGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}`,\n\t\t\t{\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: string = request.statusText;\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing deleteGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while deleting a group\");\n\t}\n};\n","import type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tGetGroupOptions,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const getGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GetGroupOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/getGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: GroupResponseItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting info for a group\",\n\t\t);\n\t}\n};\n","import type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tGroupQueryOptions,\n\tGroupListResponse,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const listGroups = async (\n\tconfig: PinataConfig | undefined,\n\tprivacy: \"public\" | \"private\",\n\toptions?: GroupQueryOptions,\n): Promise<GroupListResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/listGroups\",\n\t\t};\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst { pageToken, name, limit, isPublic } = options;\n\n\t\tif (pageToken) params.append(\"pageToken\", pageToken.toString());\n\t\tif (isPublic) params.append(\"isPublic\", isPublic.toString());\n\t\tif (name) params.append(\"name\", name);\n\t\tif (limit !== undefined) params.append(\"limit\", limit.toString());\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/groups/${privacy}?${params.toString()}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: GroupListResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing listGroups: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing groups\");\n\t}\n};\n","import type {\n\tGroupCIDOptions,\n\tPinataConfig,\n\tUpdateGroupFilesResponse,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const removeFromGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: GroupCIDOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<UpdateGroupFilesResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst wait = (milliseconds: number): Promise<void> => {\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(resolve, milliseconds);\n\t\t});\n\t};\n\n\tconst responses: UpdateGroupFilesResponse[] = [];\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/addToGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const id of options.files) {\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}/ids/${id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"DELETE\",\n\t\t\t\t\theaders: headers,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconst errorData = await response.text();\n\t\t\t\tif (response.status === 401) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, response.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: response.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: response.statusText,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error adding file ${id} to group: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while adding file ${id} to group`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tid: id,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\treturn responses;\n};\n","import type {\n\tPinataConfig,\n\tGroupResponseItem,\n\tUpdateGroupOptions,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const updateGroup = async (\n\tconfig: PinataConfig | undefined,\n\toptions: UpdateGroupOptions,\n\tprivacy: \"public\" | \"private\",\n): Promise<GroupResponseItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tname: options.name,\n\t\tis_public: options.isPublic,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/updateGroup\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/groups/${privacy}/${options.groupId}`,\n\t\t\t{\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: GroupResponseItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing updateGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while updating group\");\n\t}\n};\n","import type { PinataConfig, KeyOptions, KeyResponse } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const createKey = async (\n\tconfig: PinataConfig | undefined,\n\toptions: KeyOptions,\n): Promise<KeyResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/createKey\",\n\t\t};\n\t}\n\n\tconst data = JSON.stringify(options);\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/pinata/keys`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: KeyResponse = await request.json();\n\t\treturn res;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing createKey: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while creating API key\");\n\t}\n};\n","import type {\n\tKeyListItem,\n\tKeyListQuery,\n\tKeyListResponse,\n\tPinataConfig,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const listKeys = async (\n\tconfig: PinataConfig | undefined,\n\toptions?: KeyListQuery,\n): Promise<KeyListItem[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/listKeys\",\n\t\t};\n\t}\n\n\tconst params = new URLSearchParams();\n\n\tif (options) {\n\t\tconst { offset, name, revoked, limitedUse, exhausted } = options;\n\n\t\tif (offset) params.append(\"offset\", offset.toString());\n\t\tif (revoked !== undefined) params.append(\"revoked\", revoked.toString());\n\t\tif (limitedUse !== undefined)\n\t\t\tparams.append(\"limitedUse\", limitedUse.toString());\n\t\tif (exhausted !== undefined)\n\t\t\tparams.append(\"exhausted\", exhausted.toString());\n\t\tif (name) params.append(\"name\", name);\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/pinata/keys?${params.toString()}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res: KeyListResponse = await request.json();\n\t\treturn res.keys;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing listKeys: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while listing API keys\");\n\t}\n};\n","import type { PinataConfig, RevokeKeyResponse } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nconst wait = (milliseconds: number): Promise<void> => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, milliseconds);\n\t});\n};\n\nexport const revokeKeys = async (\n\tconfig: PinataConfig | undefined,\n\tkeys: string[],\n): Promise<RevokeKeyResponse[]> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/revokeKeys\",\n\t\t};\n\t}\n\n\tconst responses: RevokeKeyResponse[] = [];\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\tfor (const key of keys) {\n\t\ttry {\n\t\t\tconst request = await fetch(`${endpoint}/pinata/keys/${key}`, {\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\theaders: headers,\n\t\t\t});\n\n\t\t\tawait wait(300);\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst result: string = await request.json();\n\t\t\tresponses.push({\n\t\t\t\tkey: key,\n\t\t\t\tstatus: result,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlet errorMessage: string;\n\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\terrorMessage = error.message;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\terrorMessage = `Error revoking key ${key}: ${error.message}`;\n\t\t\t} else {\n\t\t\t\terrorMessage = `An unknown error occurred while revoking key ${key}`;\n\t\t\t}\n\n\t\t\tresponses.push({\n\t\t\t\tkey: key,\n\t\t\t\tstatus: errorMessage,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn responses;\n};\n","import type { PinataConfig, UploadResponse, UploadOptions } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadBase64 = async (\n\tconfig: PinataConfig | undefined,\n\tbase64String: string,\n\tnetwork: \"private\" | \"public\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst name = options?.metadata?.name\n\t\t? options?.metadata?.name\n\t\t: \"base64 string\";\n\n\tconst buffer = Buffer.from(base64String, \"base64\");\n\n\tconst blob = new Blob([buffer]);\n\n\tconst data = new FormData();\n\n\tdata.append(\"file\", blob, name);\n\tdata.append(\"network\", network);\n\tdata.append(\"name\", name);\n\tif (options?.groupId) {\n\t\tdata.append(\"group_id\", options.groupId);\n\t}\n\tif (options?.metadata?.keyvalues) {\n\t\tdata.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/base64\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tif (options?.url) {\n\t\ttry {\n\t\t\tconst request = await fetch(options.url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: data,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tconst resData: UploadResponse = res.data;\n\t\t\treturn resData;\n\t\t} catch (error) {\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t\t}\n\t\t\tthrow new PinataError(\n\t\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t\t);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: UploadResponse = res.data;\n\t\tif (options?.vectorize) {\n\t\t\tconst vectorReq = await fetch(\n\t\t\t\t`${endpoint}/vectorize/files/${resData.id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (vectorReq.ok) {\n\t\t\t\tresData.vectorized = true;\n\t\t\t\treturn resData;\n\t\t\t} else {\n\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t);\n\t}\n};\n","import {\n\tAuthenticationError,\n\tNetworkError,\n\tPinataError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\nimport type { PinataConfig, SignedUploadUrlOptions } from \"../../types\";\n\nexport const createSignedUploadURL = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SignedUploadUrlOptions,\n\tnetwork: \"public\" | \"private\",\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\ttype PayloadData = {\n\t\tdate: number;\n\t\texpires: number;\n\t\tgroup_id?: string;\n\t\tfilename?: string;\n\t\tkeyvalues?: Record<string, string>;\n\t\tnetwork?: \"public\" | \"private\";\n\t\tmax_file_size?: number;\n\t\tallow_mime_types?: string[];\n\t\tstreamable?: boolean;\n\t};\n\n\tconst date = options?.date || Math.floor(new Date().getTime() / 1000);\n\n\tconst payload: PayloadData = {\n\t\tdate: date,\n\t\texpires: options.expires,\n\t};\n\n\tif (options.groupId) {\n\t\tpayload.group_id = options.groupId;\n\t}\n\n\tif (options.name) {\n\t\tpayload.filename = options.name;\n\t}\n\n\tif (options.keyvalues) {\n\t\tpayload.keyvalues = options.keyvalues;\n\t}\n\n\tif (network) {\n\t\tpayload.network = network;\n\t}\n\n\tif (options.streamable) {\n\t\tpayload.streamable = options.streamable;\n\t}\n\n\tif (options.maxFileSize) {\n\t\tpayload.max_file_size = options.maxFileSize;\n\t}\n\n\tif (options.mimeTypes) {\n\t\tpayload.allow_mime_types = options.mimeTypes;\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\tSource: \"sdk/createSignURL\",\n\t\t};\n\t}\n\n\tlet retryCount = 0;\n\tconst maxRetries = 3;\n\n\twhile (retryCount <= maxRetries) {\n\t\ttry {\n\t\t\tconst request = await fetch(`${endpoint}/files/sign`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headers,\n\t\t\t\tcache: \"no-store\",\n\t\t\t\tbody: JSON.stringify(payload),\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\t// Don't retry auth errors\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication Failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// For other HTTP errors, allow retry\n\t\t\t\tconst error = new NetworkError(\n\t\t\t\t\t`HTTP error: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\t// Don't retry client errors (4xx) except 429\n\t\t\t\tif (\n\t\t\t\t\trequest.status >= 400 &&\n\t\t\t\t\trequest.status < 500 &&\n\t\t\t\t\trequest.status !== 429\n\t\t\t\t) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\treturn res.data;\n\t\t} catch (error) {\n\t\t\t// Don't retry PinataError instances that are auth errors\n\t\t\tif (error instanceof AuthenticationError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// Don't retry client errors except rate limiting\n\t\t\tif (\n\t\t\t\terror instanceof NetworkError &&\n\t\t\t\terror.statusCode &&\n\t\t\t\terror.statusCode >= 400 &&\n\t\t\t\terror.statusCode < 500 &&\n\t\t\t\terror.statusCode !== 429\n\t\t\t) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tretryCount++;\n\n\t\t\tif (retryCount > maxRetries) {\n\t\t\t\t// All retries exhausted\n\t\t\t\tif (error instanceof PinataError) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t\tif (error instanceof Error) {\n\t\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\t`Error processing createSignedURL after ${maxRetries} retries: ${error.message}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t`An unknown error occurred while getting signed url after ${maxRetries} retries`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Calculate delay with exponential backoff (1s, 2s, 4s)\n\t\t\tconst delay = Math.min(1000 * Math.pow(2, retryCount - 1), 4000);\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\n\t\t}\n\t}\n\t\n\t// Should never reach here since the loop always returns or throws\n\t// But TypeScript can't infer that, so we need this for type safety\n\treturn Promise.reject(\n\t\tnew PinataError(\"Unexpected error: retry loop completed without resolution\")\n\t);\n};\n","import type { PinataConfig, UploadResponse, UploadOptions } from \"../../types\";\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadFile = async (\n\tconfig: PinataConfig | undefined,\n\tfile: File,\n\tnetwork: \"public\" | \"private\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config.pinataJwt;\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tif (file.size > 94371840) {\n\t\tlet headers: Record<string, string>;\n\n\t\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t...config.customHeaders,\n\t\t\t};\n\t\t} else {\n\t\t\theaders = {\n\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\tSource: \"sdk/file\",\n\t\t\t};\n\t\t}\n\n\t\tconst name = options?.metadata?.name || file.name || \"File from SDK\";\n\n\t\tlet metadata: string = `filename ${btoa(name)},filetype ${btoa(file.type)},network ${btoa(network)}`;\n\n\t\tif (options?.groupId) {\n\t\t\tmetadata += `,group_id ${btoa(options.groupId)}`;\n\t\t}\n\n\t\tif (options?.metadata?.keyvalues) {\n\t\t\tmetadata += `,keyvalues ${btoa(JSON.stringify(options.metadata.keyvalues))}`;\n\t\t}\n\n\t\tif (options?.streamable) {\n\t\t\tmetadata += `,streamable ${btoa(\"true\")}`;\n\t\t}\n\n\t\tlet updatedEndpoint: string = `${endpoint}/files`;\n\n\t\tif (options?.url) {\n\t\t\tupdatedEndpoint = options.url;\n\t\t}\n\n\t\tconst urlReq = await fetch(updatedEndpoint, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Upload-Length\": `${file.size}`,\n\t\t\t\t\"Upload-Metadata\": metadata,\n\t\t\t\t...headers,\n\t\t\t},\n\t\t});\n\t\tconst url = urlReq.headers.get(\"Location\");\n\t\tif (!url) {\n\t\t\tconst errorData = await urlReq.text();\n\t\t\tthrow new NetworkError(\"Upload URL not provided\", urlReq.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: urlReq.url,\n\t\t\t\t\trequestHeaders: urlReq.headers,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst chunkSize = 50 * 1024 * 1024 + 1; // 50MB in bytes\n\t\tconst totalChunks = Math.ceil(file.size / chunkSize);\n\t\tlet offset = 0;\n\t\tlet uploadReq: any;\n\n\t\tfor (let i = 0; i < totalChunks; i++) {\n\t\t\tconst chunk = file.slice(offset, offset + chunkSize);\n\t\t\tlet retryCount = 0;\n\t\t\tconst maxRetries = 5;\n\n\t\t\twhile (retryCount <= maxRetries) {\n\t\t\t\ttry {\n\t\t\t\t\tuploadReq = await fetch(url as string, {\n\t\t\t\t\t\tmethod: \"PATCH\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"Content-Type\": \"application/offset+octet-stream\",\n\t\t\t\t\t\t\t\"Upload-Offset\": offset.toString(),\n\t\t\t\t\t\t\t...headers,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: chunk,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (uploadReq.ok) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst errorData = await uploadReq.text();\n\t\t\t\t\t\tthrow new Error(`HTTP ${uploadReq.status}: ${errorData}`);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tretryCount++;\n\n\t\t\t\t\tif (retryCount > maxRetries) {\n\t\t\t\t\t\t// All retries exhausted - throw final error\n\t\t\t\t\t\tconst errorData = uploadReq\n\t\t\t\t\t\t\t? await uploadReq.text().catch(() => \"Unknown error\")\n\t\t\t\t\t\t\t: error instanceof Error\n\t\t\t\t\t\t\t\t? error.message\n\t\t\t\t\t\t\t\t: String(error);\n\t\t\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t\t\t`HTTP error during chunk upload after ${maxRetries} retries: ${errorData}`,\n\t\t\t\t\t\t\tuploadReq?.status || 0,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\t\trequestUrl: uploadReq?.url || url,\n\t\t\t\t\t\t\t\t\tretriesAttempted: maxRetries,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tconst delay = Math.min(1000 * Math.pow(2, retryCount - 1), 10000); // Cap at 10 seconds\n\t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delay));\n\t\t\t\t}\n\t\t\t}\n\t\t\toffset += chunk.size;\n\t\t}\n\n\t\tif (uploadReq.status === 204) {\n\t\t\tconst cid = uploadReq.headers.get(\"upload-cid\");\n\t\t\tif (!config.pinataJwt) {\n\t\t\t\tconst data: UploadResponse = {\n\t\t\t\t\tid: \"\",\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tcid: cid,\n\t\t\t\t\tsize: file.size,\n\t\t\t\t\tcreated_at: \"\",\n\t\t\t\t\tnumber_of_files: 1,\n\t\t\t\t\tgroup_id: null,\n\t\t\t\t\tmime_type: \"\",\n\t\t\t\t\tkeyvalues: {},\n\t\t\t\t\tvectorized: false,\n\t\t\t\t\tnetwork: \"\",\n\t\t\t\t};\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\tlet dataEndpoint: string;\n\t\t\tif (config.endpointUrl) {\n\t\t\t\tdataEndpoint = config.endpointUrl;\n\t\t\t} else {\n\t\t\t\tdataEndpoint = \"https://api.pinata.cloud/v3\";\n\t\t\t}\n\t\t\tconst fileInfoReq = await fetch(\n\t\t\t\t`${dataEndpoint}/files/${network}?cid=${cid}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tconst fileInfo = await fileInfoReq.json();\n\t\t\tconst data: UploadResponse = fileInfo.data.files[0];\n\t\t\tif (options?.vectorize) {\n\t\t\t\tconst vectorReq = await fetch(\n\t\t\t\t\t`${endpoint}/vectorize/files/${data.id}`,\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tif (vectorReq.ok) {\n\t\t\t\t\tdata.vectorized = true;\n\t\t\t\t\treturn data;\n\t\t\t\t} else {\n\t\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: vectorReq.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn data;\n\t\t}\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/file\",\n\t\t};\n\t}\n\n\tconst data = new FormData();\n\tdata.append(\"file\", file, file.name);\n\n\tdata.append(\"network\", network);\n\n\tdata.append(\"name\", options?.metadata?.name || file.name || \"File from SDK\");\n\n\tif (options?.groupId) {\n\t\tdata.append(\"group_id\", options.groupId);\n\t}\n\n\tif (options?.metadata?.keyvalues) {\n\t\tdata.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t}\n\n\tif (options?.streamable) {\n\t\tdata.append(\"streamable\", \"true\");\n\t}\n\n\tif (options?.url) {\n\t\ttry {\n\t\t\tconst request = await fetch(options.url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tconst resData: UploadResponse = res.data;\n\t\t\treturn resData;\n\t\t} catch (error) {\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t`Error uploading file: ${error.message}`,\n\t\t\t\t\tundefined,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: error.toString(),\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new PinataError(\n\t\t\t\t\"An unknown error occurred while trying to upload file\",\n\t\t\t);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst res = await request.json();\n\t\tconst resData: UploadResponse = res.data;\n\t\tif (options?.vectorize) {\n\t\t\tconst vectorReq = await fetch(\n\t\t\t\t`${endpoint}/vectorize/files/${resData.id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (vectorReq.ok) {\n\t\t\t\tresData.vectorized = true;\n\t\t\t\treturn resData;\n\t\t\t} else {\n\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(\n\t\t\t\t`Error uploading file: ${error.message}`,\n\t\t\t\tundefined,\n\t\t\t\t{\n\t\t\t\t\terror: error.toString(),\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while trying to upload file\",\n\t\t);\n\t}\n};\n","import type { PinataConfig, UploadResponse, UploadOptions } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadFileArray = async (\n\tconfig: PinataConfig | undefined,\n\tfiles: File[],\n\tnetwork: \"public\" | \"private\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst folder = options?.metadata?.name || \"folder_from_sdk\";\n\n\tconst data = new FormData();\n\n\tfor (const file of Array.from(files)) {\n\t\tconst path = file.webkitRelativePath || `${folder}/${file.name}`;\n\t\tdata.append(\"file\", file, path);\n\t}\n\n\t// Reserved for later release\n\t// data.append(\"name\", folder);\n\n\t// data.append(\"network\", network);\n\n\t// if (options?.groupId) {\n\t//   data.append(\"group_id\", options.groupId);\n\t// }\n\n\t// if (options?.metadata?.keyvalues) {\n\t//   data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t// }\n\n\t// Legacy\n\tdata.append(\n\t\t\"pinataMetadata\",\n\t\tJSON.stringify({\n\t\t\tname: folder,\n\t\t\tkeyvalues: options?.metadata?.keyvalues,\n\t\t}),\n\t);\n\n\tdata.append(\n\t\t\"pinataOptions\",\n\t\tJSON.stringify({\n\t\t\tgroupId: options?.groupId,\n\t\t\tcidVersion: 1,\n\t\t}),\n\t);\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/fileArray\",\n\t\t};\n\t}\n\t// Reserved for later release\n\t//let endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\tlet endpoint: string = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n\n\tif (config.legacyUploadUrl) {\n\t\tendpoint = config.legacyUploadUrl;\n\t}\n\n\ttry {\n\t\t// Reserved for later release\n\t\t// const request = await fetch(`${endpoint}/files`, {\n\t\t// \tmethod: \"POST\",\n\t\t// \theaders: headers,\n\t\t// \tbody: data,\n\t\t// });\n\t\tconst request = await fetch(`${endpoint}`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\n\t\tconst resData: UploadResponse = {\n\t\t\tid: res.ID,\n\t\t\tname: res.Name,\n\t\t\tcid: res.IpfsHash,\n\t\t\tsize: res.PinSize,\n\t\t\tcreated_at: res.Timestamp,\n\t\t\tnumber_of_files: res.NumberOfFiles,\n\t\t\tmime_type: res.MimeType,\n\t\t\tgroup_id: res.GroupId,\n\t\t\tkeyvalues: res.Keyvalues,\n\t\t\tvectorized: false,\n\t\t\tnetwork: \"public\",\n\t\t};\n\n\t\t// if (options?.vectorize) {\n\t\t//   const vectorReq = await fetch(\n\t\t//     `${endpoint}/vectorize/files/${resData.id}`,\n\t\t//     {\n\t\t//       method: \"POST\",\n\t\t//       headers: {\n\t\t//         Authorization: `Bearer ${jwt}`,\n\t\t//       },\n\t\t//     },\n\t\t//   );\n\t\t//   if (vectorReq.ok) {\n\t\t//     resData.vectorized = true;\n\t\t//     return resData;\n\t\t//   } else {\n\t\t//     const errorData = await vectorReq.text();\n\t\t//     throw new NetworkError(\n\t\t//       `HTTP error during vectorization: ${errorData}`,\n\t\t//       vectorReq.status,\n\t\t//       {\n\t\t//         error: errorData,\n\t\t//         code: \"HTTP_ERROR\",\n\t\t//         metadata: {\n\t\t//           requestUrl: request.url,\n\t\t//         },\n\t\t//       },\n\t\t//     );\n\t\t//   }\n\t\t// }\n\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing fileArray: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while uploading an array of files\",\n\t\t);\n\t}\n};\n","import type {\n\tPinataConfig,\n\tUploadResponse,\n\tUploadOptions,\n\tJsonBody,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadJson = async <T extends JsonBody>(\n\tconfig: PinataConfig | undefined,\n\tjsonData: T,\n\tnetwork: \"public\" | \"private\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tconst json = JSON.stringify(jsonData);\n\tconst blob = new Blob([json]);\n\tconst file = new File([blob], \"data.json\", { type: \"application/json\" });\n\n\tconst data = new FormData();\n\tdata.append(\"file\", file, file.name);\n\tdata.append(\"network\", network);\n\tdata.append(\"name\", options?.metadata?.name || file.name || \"File from SDK\");\n\tif (options?.groupId) {\n\t\tdata.append(\"group_id\", options.groupId);\n\t}\n\tif (options?.metadata?.keyvalues) {\n\t\tdata.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/json\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tif (options?.url) {\n\t\ttry {\n\t\t\tconst request = await fetch(options.url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: data,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tconst resData: UploadResponse = res.data;\n\t\t\treturn resData;\n\t\t} catch (error) {\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t\t}\n\t\t\tthrow new PinataError(\n\t\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t\t);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: UploadResponse = res.data;\n\t\tif (options?.vectorize) {\n\t\t\tconst vectorReq = await fetch(\n\t\t\t\t`${endpoint}/vectorize/files/${resData.id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (vectorReq.ok) {\n\t\t\t\tresData.vectorized = true;\n\t\t\t\treturn resData;\n\t\t\t} else {\n\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing json: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while uploading json\");\n\t}\n};\n","import type { PinataConfig, UploadResponse, UploadOptions } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadUrl = async (\n\tconfig: PinataConfig | undefined,\n\turl: string,\n\tnetwork: \"public\" | \"private\",\n\toptions?: UploadOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\tconst data = new FormData();\n\n\tconst stream = await fetch(url);\n\n\tif (!stream.ok) {\n\t\tconst errorData = await stream.text();\n\t\tthrow new NetworkError(`HTTP error: ${errorData}`, stream.status, {\n\t\t\terror: errorData,\n\t\t\tcode: \"HTTP_ERROR\",\n\t\t\tmetadata: {\n\t\t\t\trequestUrl: stream.url,\n\t\t\t},\n\t\t});\n\t}\n\n\tconst arrayBuffer = await stream.arrayBuffer();\n\n\tconst blob = new Blob([arrayBuffer]);\n\n\tconst name = options?.metadata?.name ?? \"url_upload\";\n\n\tconst file = new File([blob], name);\n\n\tdata.append(\"file\", file, name);\n\tdata.append(\"network\", network);\n\tdata.append(\"name\", name);\n\tif (options?.groupId) {\n\t\tdata.append(\"group_id\", options.groupId);\n\t}\n\n\tif (options?.metadata?.keyvalues) {\n\t\tdata.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\tSource: \"sdk/url\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://uploads.pinata.cloud/v3\";\n\n\tif (config.uploadUrl) {\n\t\tendpoint = config.uploadUrl;\n\t}\n\n\tif (options?.url) {\n\t\ttry {\n\t\t\tconst request = await fetch(options.url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: data,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tconst errorData = await request.text();\n\t\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\t\trequest.status,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\t\terror: errorData,\n\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst res = await request.json();\n\t\t\tconst resData: UploadResponse = res.data;\n\t\t\treturn resData;\n\t\t} catch (error) {\n\t\t\tif (error instanceof PinataError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthrow new PinataError(`Error processing base64: ${error.message}`);\n\t\t\t}\n\t\t\tthrow new PinataError(\n\t\t\t\t\"An unknown error occurred while trying to upload base64\",\n\t\t\t);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: UploadResponse = res.data;\n\t\tif (options?.vectorize) {\n\t\t\tconst vectorReq = await fetch(\n\t\t\t\t`${endpoint}/vectorize/files/${resData.id}`,\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (vectorReq.ok) {\n\t\t\t\tresData.vectorized = true;\n\t\t\t\treturn resData;\n\t\t\t} else {\n\t\t\t\tconst errorData = await vectorReq.text();\n\t\t\t\tthrow new NetworkError(\n\t\t\t\t\t`HTTP error during vectorization: ${errorData}`,\n\t\t\t\t\tvectorReq.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing url: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while uploading by url\");\n\t}\n};\n","import type {\n\tPinataConfig,\n\tPinByCIDResponse,\n\tUploadCIDOptions,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const uploadCid = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\toptions?: UploadCIDOptions,\n) => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst jwt: string | undefined = options?.keys || config?.pinataJwt;\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${jwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/cid\",\n\t\t};\n\t}\n\n\tconst requestBody: Record<string, any> = {\n\t\tcid: cid,\n\t\tname: options?.metadata ? options?.metadata?.name : cid,\n\t\tkeyvalues: options?.metadata?.keyvalues,\n\t\tgroup_id: options?.groupId,\n\t\thost_nodes: options?.peerAddresses,\n\t};\n\n\tconst data = JSON.stringify(requestBody);\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/public/pin_by_cid`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: headers,\n\t\t\tbody: data,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: PinByCIDResponse = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing cid: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\"An unknown error occurred while pinning by CID\");\n\t}\n};\n","import type { PinataConfig } from \"../../types/\";\nimport {\n\tAnalyticsRequests,\n\tAnalyticsBandwidth,\n\tTimeIntervalAnalyticsBuilder,\n} from \"./\";\nimport { formatConfig } from \"../../../utils/format-config\";\n\nexport class Analytics {\n\tconfig: PinataConfig | undefined;\n\trequests: AnalyticsRequests;\n\tbandwidth: AnalyticsBandwidth;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.requests = new AnalyticsRequests(this.config);\n\t\tthis.bandwidth = new AnalyticsBandwidth(this.config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t\tthis.requests.updateConfig(newConfig);\n\t\tthis.bandwidth.updateConfig(newConfig);\n\t}\n\n\tsummary(options: {\n\t\tdomain: string;\n\t\tstart: string;\n\t\tend: string;\n\t\tinterval: \"day\" | \"week\";\n\t}): TimeIntervalAnalyticsBuilder {\n\t\treturn new TimeIntervalAnalyticsBuilder(\n\t\t\tthis.config,\n\t\t\toptions.domain,\n\t\t\toptions.start,\n\t\t\toptions.end,\n\t\t\toptions.interval,\n\t\t);\n\t}\n}\n","export const calculateDates = (\n\tdays: number,\n): { start: string; end: string } => {\n\tconst end = new Date();\n\tconst start = new Date();\n\tstart.setDate(start.getDate() - days);\n\n\t// Format dates to ISO string and trim time portion\n\treturn {\n\t\tstart: start.toISOString().split(\"T\")[0],\n\t\tend: end.toISOString().split(\"T\")[0],\n\t};\n};\n","import {\n\tPinataConfig,\n\tTopAnalyticsQuery,\n\tTopAnalyticsResponse,\n} from \"../../types\";\nimport { analyticsTopUsage } from \"../../functions\";\nimport { calculateDates } from \"./utils\";\n\nexport class AnalyticsFilter {\n\tprotected config: PinataConfig | undefined;\n\tprotected query: TopAnalyticsQuery;\n\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tdomain: string,\n\t\tstart: string,\n\t\tend: string,\n\t) {\n\t\tthis.config = config;\n\t\tthis.query = {\n\t\t\tgateway_domain: domain,\n\t\t\tstart_date: start,\n\t\t\tend_date: end,\n\t\t\tsort_by: \"requests\", // Will be overridden in child classes\n\t\t\tattribute: \"cid\",\n\t\t};\n\t}\n\n\tcid(cid?: string): this {\n\t\tthis.query.attribute = \"cid\";\n\t\tif (cid) {\n\t\t\tthis.query.cid = cid;\n\t\t}\n\t\treturn this;\n\t}\n\n\tfileName(fileName?: string): this {\n\t\tthis.query.attribute = \"file_name\";\n\t\tif (fileName) {\n\t\t\tthis.query.file_name = fileName;\n\t\t}\n\t\treturn this;\n\t}\n\n\tuserAgent(userAgent?: string): this {\n\t\tthis.query.attribute = \"user_agent\";\n\t\tif (userAgent) {\n\t\t\tthis.query.user_agent = userAgent;\n\t\t}\n\t\treturn this;\n\t}\n\n\tcountry(country?: string): this {\n\t\tthis.query.attribute = \"country\";\n\t\tif (country) {\n\t\t\tthis.query.country = country;\n\t\t}\n\t\treturn this;\n\t}\n\n\tregion(region?: string): this {\n\t\tthis.query.attribute = \"region\";\n\t\tif (region) {\n\t\t\tthis.query.region = region;\n\t\t}\n\t\treturn this;\n\t}\n\n\treferer(referer?: string): this {\n\t\tthis.query.attribute = \"referer\";\n\t\tif (referer) {\n\t\t\tthis.query.referer = referer;\n\t\t}\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): this {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tsort(order: \"asc\" | \"desc\"): this {\n\t\tthis.query.sort_order = order;\n\t\treturn this;\n\t}\n\n\tdays(numberOfDays: number): this {\n\t\tconst { start, end } = calculateDates(numberOfDays);\n\t\tthis.query.start_date = start;\n\t\tthis.query.end_date = end;\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: TopAnalyticsResponse) => any) | null,\n\t\tonrejected?: ((reason: any) => any) | null,\n\t): Promise<any> {\n\t\treturn analyticsTopUsage(this.config, this.query).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n}\n","import type { PinataConfig } from \"../../types\";\nimport { AnalyticsFilter } from \"./AnalyticsFilter\";\n\nexport class AnalyticsBandwidth extends AnalyticsFilter {\n\tconstructor(config?: PinataConfig) {\n\t\tsuper(config, \"\", \"\", \"\"); // These will need to be set through methods\n\t\tthis.query.sort_by = \"bandwidth\";\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcustomDates(start?: string, end?: string): this {\n\t\tif (start) this.query.start_date = start;\n\t\tif (end) this.query.end_date = end;\n\t\treturn this;\n\t}\n\n\tfrom(domain: string): this {\n\t\tthis.query.gateway_domain = domain;\n\t\treturn this;\n\t}\n}\n","import type { AnalyticsQuery, PinataConfig } from \"../../types\";\n\nexport class AnalyticsBuilder<T extends AnalyticsQuery, R> {\n\tprotected config: PinataConfig | undefined;\n\tprotected query: T;\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined, query: T) {\n\t\tthis.config = config;\n\t\tthis.query = query;\n\t}\n\n\tcid(cid: string): this {\n\t\tthis.query.cid = cid;\n\t\treturn this;\n\t}\n\n\tfileName(fileName: string): this {\n\t\tthis.query.file_name = fileName;\n\t\treturn this;\n\t}\n\n\tuserAgent(userAgent: string): this {\n\t\tthis.query.user_agent = userAgent;\n\t\treturn this;\n\t}\n\n\tcountry(country: string): this {\n\t\tthis.query.country = country;\n\t\treturn this;\n\t}\n\n\tregion(region: string): this {\n\t\tthis.query.region = region;\n\t\treturn this;\n\t}\n\n\treferer(referer: string): this {\n\t\tthis.query.referer = referer;\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): this {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tsort(order: \"asc\" | \"desc\"): this {\n\t\tthis.query.sort_order = order;\n\t\treturn this;\n\t}\n\n\t// private async rateLimit(): Promise<void> {\n\t// \tthis.requestCount++;\n\t// \tconst now = Date.now();\n\t// \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t// \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t// \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t// \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t// \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t// \t\t}\n\t// \t\tthis.requestCount = 0;\n\t// \t}\n\t// \tthis.lastRequestTime = Date.now();\n\t// }\n\n\tprotected async getAnalytics(): Promise<R> {\n\t\t//await this.rateLimit();\n\t\tthrow new Error(\"getAnalytics method must be implemented in derived class\");\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: R) => any) | null,\n\t\tonrejected?: ((reason: any) => any) | null,\n\t): Promise<any> {\n\t\treturn this.getAnalytics().then(onfulfilled, onrejected);\n\t}\n}\n","import { PinataConfig } from \"../../types\";\nimport { AnalyticsFilter } from \"./AnalyticsFilter\";\n\nexport class AnalyticsRequests extends AnalyticsFilter {\n\tconstructor(config?: PinataConfig) {\n\t\tsuper(config, \"\", \"\", \"\"); // These will need to be set through methods\n\t\tthis.query.sort_by = \"requests\";\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcustomDates(start?: string, end?: string): this {\n\t\tif (start) this.query.start_date = start;\n\t\tif (end) this.query.end_date = end;\n\t\treturn this;\n\t}\n\n\tfrom(domain: string): this {\n\t\tthis.query.gateway_domain = domain;\n\t\treturn this;\n\t}\n}\n","import { AnalyticsBuilder } from \"./AnalyticsBuilder\";\nimport {\n\tTimeIntervalAnalyticsQuery,\n\tTimeIntervalAnalyticsResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport { analyticsDateInterval } from \"../../functions\";\n\nexport class TimeIntervalAnalyticsBuilder extends AnalyticsBuilder<\n\tTimeIntervalAnalyticsQuery,\n\tTimeIntervalAnalyticsResponse\n> {\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tdomain: string,\n\t\tstart: string,\n\t\tend: string,\n\t\tdateInterval: \"day\" | \"week\",\n\t) {\n\t\tsuper(config, {\n\t\t\tgateway_domain: domain,\n\t\t\tstart_date: start,\n\t\t\tend_date: end,\n\t\t\tdate_interval: dateInterval,\n\t\t});\n\t}\n\n\tsortBy(sortBy: \"requests\" | \"bandwidth\"): this {\n\t\tthis.query.sort_by = sortBy;\n\t\treturn this;\n\t}\n\n\tprotected async getAnalytics(): Promise<TimeIntervalAnalyticsResponse> {\n\t\treturn analyticsDateInterval(this.config, this.query);\n\t}\n\n\tasync all(): Promise<TimeIntervalAnalyticsResponse> {\n\t\treturn this.getAnalytics();\n\t}\n}\n","import type {\n\tPinataConfig,\n\tGroupQueryOptions,\n\tGroupListResponse,\n\tGroupResponseItem,\n} from \"../../types\";\nimport { listGroups } from \"../../functions\";\n\nexport class FilterGroups {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: GroupQueryOptions = {};\n\tprivate privacy: \"private\" | \"public\";\n\t// rate limit vars\n\t// private requestCount = 0;\n\t// private lastRequestTime = 0;\n\t// private readonly MAX_REQUESTS_PER_MINUTE = 30;\n\t// private readonly MINUTE_IN_MS = 60000;\n\tprivate nextPageToken: string | undefined;\n\n\tconstructor(config: PinataConfig | undefined, privacy: \"private\" | \"public\") {\n\t\tthis.config = config;\n\t\tthis.privacy = privacy;\n\t}\n\n\tname(name: string): FilterGroups {\n\t\tthis.query.name = name;\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): FilterGroups {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tisPublic(isPublic: boolean): FilterGroups {\n\t\tthis.query.isPublic = isPublic;\n\t\treturn this;\n\t}\n\n\tpageToken(pageToken: string): FilterGroups {\n\t\tthis.query.pageToken = pageToken;\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: GroupListResponse) => any) | null,\n\t\tonrejected?: ((reason: any) => any) | null,\n\t): Promise<GroupListResponse> {\n\t\treturn this.fetchPage()\n\t\t\t.then((response) => {\n\t\t\t\tthis.nextPageToken = response.next_page_token;\n\t\t\t\treturn response;\n\t\t\t})\n\t\t\t.then(onfulfilled, onrejected);\n\t}\n\n\tprivate async fetchPage(): Promise<GroupListResponse> {\n\t\tif (this.nextPageToken) {\n\t\t\tthis.query.pageToken = this.nextPageToken;\n\t\t}\n\t\treturn listGroups(this.config, this.privacy, this.query);\n\t}\n\n\t// rate limit, hopefully temporary?\n\t// private async rateLimit(): Promise<void> {\n\t// \tthis.requestCount++;\n\t// \tconst now = Date.now();\n\t// \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t// \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t// \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t// \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t// \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t// \t\t}\n\t// \t\tthis.requestCount = 0;\n\t// \t}\n\t// \tthis.lastRequestTime = Date.now();\n\t// }\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<\n\t\tGroupResponseItem,\n\t\tvoid,\n\t\tunknown\n\t> {\n\t\twhile (true) {\n\t\t\tconst response = await this.fetchPage();\n\t\t\tfor (const item of response.groups) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t\tif (!response.next_page_token) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.nextPageToken = response.next_page_token;\n\t\t}\n\t}\n\n\tasync all(): Promise<GroupResponseItem[]> {\n\t\tconst allItems: GroupResponseItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n","import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\taddToGroup,\n\tcreateGroup,\n\tdeleteGroup,\n\tgetGroup,\n\tremoveFromGroup,\n\tupdateGroup,\n} from \"../../functions\";\nimport {\n\tGetGroupOptions,\n\tGroupCIDOptions,\n\tGroupOptions,\n\tGroupResponseItem,\n\tPinataConfig,\n\tUpdateGroupFilesResponse,\n\tUpdateGroupOptions,\n} from \"../../types\";\nimport { FilterGroups } from \"./GroupsFilter\";\n\nexport class PublicGroups {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcreate(options: GroupOptions): Promise<GroupResponseItem> {\n\t\treturn createGroup(this.config, options, \"public\");\n\t}\n\n\tlist(): FilterGroups {\n\t\treturn new FilterGroups(this.config, \"public\");\n\t}\n\n\tget(options: GetGroupOptions): Promise<GroupResponseItem> {\n\t\treturn getGroup(this.config, options, \"public\");\n\t}\n\n\taddFiles(options: GroupCIDOptions): Promise<UpdateGroupFilesResponse[]> {\n\t\treturn addToGroup(this.config, options, \"public\");\n\t}\n\n\tremoveFiles(options: GroupCIDOptions): Promise<UpdateGroupFilesResponse[]> {\n\t\treturn removeFromGroup(this.config, options, \"public\");\n\t}\n\n\tupdate(options: UpdateGroupOptions): Promise<GroupResponseItem> {\n\t\treturn updateGroup(this.config, options, \"public\");\n\t}\n\n\tdelete(options: GetGroupOptions): Promise<string> {\n\t\treturn deleteGroup(this.config, options, \"public\");\n\t}\n}\n","import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\taddToGroup,\n\tcreateGroup,\n\tdeleteGroup,\n\tgetGroup,\n\tremoveFromGroup,\n\tupdateGroup,\n} from \"../../functions\";\nimport {\n\tGetGroupOptions,\n\tGroupCIDOptions,\n\tGroupOptions,\n\tGroupResponseItem,\n\tPinataConfig,\n\tUpdateGroupFilesResponse,\n\tUpdateGroupOptions,\n} from \"../../types\";\nimport { FilterGroups } from \"./GroupsFilter\";\n\nexport class PrivateGroups {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcreate(options: GroupOptions): Promise<GroupResponseItem> {\n\t\treturn createGroup(this.config, options, \"private\");\n\t}\n\n\tlist(): FilterGroups {\n\t\treturn new FilterGroups(this.config, \"private\");\n\t}\n\n\tget(options: GetGroupOptions): Promise<GroupResponseItem> {\n\t\treturn getGroup(this.config, options, \"private\");\n\t}\n\n\taddFiles(options: GroupCIDOptions): Promise<UpdateGroupFilesResponse[]> {\n\t\treturn addToGroup(this.config, options, \"private\");\n\t}\n\n\tremoveFiles(options: GroupCIDOptions): Promise<UpdateGroupFilesResponse[]> {\n\t\treturn removeFromGroup(this.config, options, \"private\");\n\t}\n\n\tupdate(options: UpdateGroupOptions): Promise<GroupResponseItem> {\n\t\treturn updateGroup(this.config, options, \"private\");\n\t}\n\n\tdelete(options: GetGroupOptions): Promise<string> {\n\t\treturn deleteGroup(this.config, options, \"private\");\n\t}\n}\n","import type { PinataConfig } from \"../../types\";\nimport { formatConfig } from \"../../../utils/format-config\";\nimport { PublicGroups } from \"./PublicGroups\";\nimport { PrivateGroups } from \"./PrivateGroups\";\n\nexport class Groups {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicGroups;\n\tprivate: PrivateGroups;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicGroups(config);\n\t\tthis.private = new PrivateGroups(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n","import { FilterKeys } from \"./\";\nimport type {\n\tPinataConfig,\n\tKeyOptions,\n\tKeyResponse,\n\tRevokeKeyResponse,\n} from \"../../types\";\nimport { formatConfig } from \"../../../utils/format-config\";\nimport { createKey, revokeKeys } from \"../../functions\";\n\nexport class Keys {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tcreate(options: KeyOptions): Promise<KeyResponse> {\n\t\treturn createKey(this.config, options);\n\t}\n\n\tlist(): FilterKeys {\n\t\treturn new FilterKeys(this.config);\n\t}\n\n\trevoke(keys: string[]): Promise<RevokeKeyResponse[]> {\n\t\treturn revokeKeys(this.config, keys);\n\t}\n}\n","import { listKeys } from \"../../functions\";\nimport type { PinataConfig, KeyListQuery, KeyListItem } from \"../../types\";\n\nexport class FilterKeys {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: KeyListQuery = {};\n\t// rate limit vars\n\t// private requestCount = 0;\n\t// private lastRequestTime = 0;\n\t// private readonly MAX_REQUESTS_PER_MINUTE = 30;\n\t// private readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\toffset(offset: number): FilterKeys {\n\t\tthis.query.offset = offset;\n\t\treturn this;\n\t}\n\n\trevoked(revoked: boolean): FilterKeys {\n\t\tthis.query.revoked = revoked;\n\t\treturn this;\n\t}\n\n\tlimitedUse(limitedUse: boolean): FilterKeys {\n\t\tthis.query.limitedUse = limitedUse;\n\t\treturn this;\n\t}\n\n\texhausted(exhausted: boolean): FilterKeys {\n\t\tthis.query.exhausted = exhausted;\n\t\treturn this;\n\t}\n\n\tname(name: string): FilterKeys {\n\t\tthis.query.name = name;\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: KeyListItem[]) => any) | null,\n\t\tonrejected?: ((reason: any) => any) | null,\n\t): Promise<any> {\n\t\treturn listKeys(this.config, this.query).then(onfulfilled, onrejected);\n\t}\n\n\t// private async rateLimit(): Promise<void> {\n\t// \tthis.requestCount++;\n\t// \tconst now = Date.now();\n\t// \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t// \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t// \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t// \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t// \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t// \t\t}\n\t// \t\tthis.requestCount = 0;\n\t// \t}\n\t// \tthis.lastRequestTime = Date.now();\n\t// }\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<KeyListItem, void, unknown> {\n\t\tlet hasMore = true;\n\t\tlet offset = 0;\n\n\t\twhile (hasMore) {\n\t\t\t//await this.rateLimit(); // applying rate limit\n\t\t\tthis.query.offset = offset;\n\n\t\t\tconst items = await listKeys(this.config, this.query);\n\n\t\t\tfor (const item of items) {\n\t\t\t\tyield item;\n\t\t\t}\n\n\t\t\tif (items.length === 0) {\n\t\t\t\thasMore = false;\n\t\t\t} else {\n\t\t\t\toffset += items.length;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<KeyListItem[]> {\n\t\tconst allItems: KeyListItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n","import type { PinataConfig } from \"../../types\";\nimport { PublicGateways, PrivateGateways } from \"./\";\nimport { formatConfig } from \"../../../utils/format-config\";\n\nexport class Gateways {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicGateways;\n\tprivate: PrivateGateways;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicGateways(config);\n\t\tthis.private = new PrivateGateways(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n","import {\n\tPinataConfig,\n\tAccessLinkOptions,\n\tOptimizeImageOptions,\n} from \"../../types\";\nimport { createAccessLink } from \"../../functions/gateway/createAccessLink\";\n\nexport class OptimizeImageCreateAccessLink {\n\tprivate config: PinataConfig | undefined;\n\tprivate urlOpts: AccessLinkOptions;\n\tprivate imgOpts: OptimizeImageOptions = {};\n\n\tconstructor(config: PinataConfig | undefined, urlOpts: AccessLinkOptions) {\n\t\tthis.config = config;\n\t\tthis.urlOpts = urlOpts;\n\t}\n\n\toptimizeImage(options: OptimizeImageOptions): OptimizeImageCreateAccessLink {\n\t\tthis.imgOpts = { ...this.imgOpts, ...options };\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: string) => any) | null,\n\t\tonrejected?: ((reason: any) => any) | null,\n\t): Promise<any> {\n\t\treturn createAccessLink(this.config, this.urlOpts, this.imgOpts).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n}\n","import type {\n\tPinataConfig,\n\tOptimizeImageOptions,\n\tGetCIDResponse,\n} from \"../../types\";\nimport { getCid } from \"../../functions\";\n\nexport class OptimizeImageGetCid {\n\tprivate config: PinataConfig | undefined;\n\tprivate cid: string;\n\tprivate gatewayType?: \"ipfs\" | \"files\";\n\tprivate options: OptimizeImageOptions = {};\n\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tcid: string,\n\t\tgatewayType?: \"ipfs\" | \"files\",\n\t) {\n\t\tthis.config = config;\n\t\tthis.cid = cid;\n\t\tthis.gatewayType = gatewayType;\n\t}\n\n\toptimizeImage(options: OptimizeImageOptions): OptimizeImageGetCid {\n\t\tthis.options = { ...this.options, ...options };\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: GetCIDResponse) => any) | null,\n\t\tonrejected?: ((reason: any) => any) | null,\n\t): Promise<any> {\n\t\treturn getCid(this.config, this.cid, this.gatewayType, this.options).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n}\n","import type { PinataConfig, AccessLinkOptions } from \"../../types\";\nimport { OptimizeImageGetCid, OptimizeImageCreateAccessLink } from \"./\";\n\nexport class PrivateGateways {\n\tprivate config: PinataConfig | undefined;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\tget(cid: string): OptimizeImageGetCid {\n\t\treturn new OptimizeImageGetCid(this.config, cid, \"files\");\n\t}\n\n\tcreateAccessLink(options: AccessLinkOptions): OptimizeImageCreateAccessLink {\n\t\treturn new OptimizeImageCreateAccessLink(this.config, options);\n\t}\n}\n","import { convertIPFSUrl } from \"../../functions\";\nimport { PinataConfig } from \"../../types\";\nimport { OptimizeImageGetCid } from \"./\";\n\nexport class PublicGateways {\n\tprivate config: PinataConfig | undefined;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\tget(cid: string): OptimizeImageGetCid {\n\t\treturn new OptimizeImageGetCid(this.config, cid, \"ipfs\");\n\t}\n\n\tconvert(url: string, gatewayPrefix?: string): Promise<string> {\n\t\treturn convertIPFSUrl(this.config, url, gatewayPrefix);\n\t}\n}\n","import type { PinataConfig, FileListItem } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const getFile = async (\n\tconfig: PinataConfig | undefined,\n\tid: string,\n\tprivacy: \"public\" | \"private\",\n): Promise<FileListItem> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...config.customHeaders,\n\t\t};\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/getFile\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(`${endpoint}/files/${privacy}/${id}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: headers,\n\t\t});\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\tconst resData: FileListItem = res.data;\n\t\treturn resData;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getGroup: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while getting info for a group\",\n\t\t);\n\t}\n};\n","import {\n\tPinataConfig,\n\tFileListQuery,\n\tFileListResponse,\n\tFileListItem,\n} from \"../../types\";\nimport { listFiles } from \"../../functions\";\n\nexport class FilterFiles {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: FileListQuery = {};\n\tprivate currentPageToken: string | undefined;\n\tprivate privacy: \"private\" | \"public\";\n\t// rate limit vars\n\t// private requestCount = 0;\n\t// private lastRequestTime = 0;\n\t// private readonly MAX_REQUESTS_PER_MINUTE = 30;\n\t// private readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined, privacy: \"private\" | \"public\") {\n\t\tthis.config = config;\n\t\tthis.privacy = privacy;\n\t}\n\n\tname(name: string): FilterFiles {\n\t\tthis.query.name = name;\n\t\treturn this;\n\t}\n\n\tgroup(group: string): FilterFiles {\n\t\tthis.query.group = group;\n\t\treturn this;\n\t}\n\n\tcid(cid: string): FilterFiles {\n\t\tthis.query.cid = cid;\n\t\treturn this;\n\t}\n\n\tmimeType(mimeType: string): FilterFiles {\n\t\tthis.query.mimeType = mimeType;\n\t\treturn this;\n\t}\n\n\torder(order: \"ASC\" | \"DESC\"): FilterFiles {\n\t\tthis.query.order = order;\n\t\treturn this;\n\t}\n\n\tlimit(limit: number): FilterFiles {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tcidPending(cidPending: boolean): FilterFiles {\n\t\tthis.query.cidPending = cidPending;\n\t\treturn this;\n\t}\n\n\tkeyvalues(keyvalues: Record<string, string>): FilterFiles {\n\t\tthis.query.metadata = keyvalues;\n\t\treturn this;\n\t}\n\n\tnoGroup(noGroup: boolean): FilterFiles {\n\t\tthis.query.noGroup = noGroup;\n\t\treturn this;\n\t}\n\n\tpageToken(pageToken: string): FilterFiles {\n\t\tthis.query.pageToken = pageToken;\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: FileListResponse) => any) | null,\n\t\tonrejected?: ((reason: any) => any) | null,\n\t): Promise<any> {\n\t\treturn this.fetchPage().then(onfulfilled, onrejected);\n\t}\n\n\tprivate async fetchPage(): Promise<FileListResponse> {\n\t\tif (this.currentPageToken) {\n\t\t\tthis.query.pageToken = this.currentPageToken;\n\t\t}\n\t\tconst response = await listFiles(this.config, this.privacy, this.query);\n\t\tthis.currentPageToken = response.next_page_token;\n\t\treturn response;\n\t}\n\n\t// // rate limit, hopefully temporary?\n\t// private async rateLimit(): Promise<void> {\n\t// \tthis.requestCount++;\n\t// \tconst now = Date.now();\n\t// \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t// \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t// \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t// \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t// \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t// \t\t}\n\t// \t\tthis.requestCount = 0;\n\t// \t}\n\t// \tthis.lastRequestTime = Date.now();\n\t// }\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<FileListItem, void, unknown> {\n\t\twhile (true) {\n\t\t\tconst items = await this.fetchPage();\n\t\t\tfor (const item of items.files) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t\tif (!this.currentPageToken) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<FileListItem[]> {\n\t\tconst allItems: FileListItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n","import {\n\tPinQueueItem,\n\tPinQueueQuery,\n\tPinQueueResponse,\n\tPinataConfig,\n} from \"../../types\";\nimport { queue } from \"../../functions\";\n\nexport class FilterQueue {\n\tprivate config: PinataConfig | undefined;\n\tprivate query: PinQueueQuery = {};\n\tprivate currentPageToken: string | undefined;\n\t// rate limit vars\n\tprivate requestCount = 0;\n\tprivate lastRequestTime = 0;\n\tprivate readonly MAX_REQUESTS_PER_MINUTE = 30;\n\tprivate readonly MINUTE_IN_MS = 60000;\n\n\tconstructor(config: PinataConfig | undefined) {\n\t\tthis.config = config;\n\t}\n\n\tcid(cid: string): FilterQueue {\n\t\tthis.query.cid = cid;\n\t\treturn this;\n\t}\n\n\tstatus(\n\t\tstatus:\n\t\t\t| \"prechecking\"\n\t\t\t| \"retrieving\"\n\t\t\t| \"expired\"\n\t\t\t| \"backfilled\"\n\t\t\t| \"over_free_limit\"\n\t\t\t| \"over_max_size\"\n\t\t\t| \"invalid_object\"\n\t\t\t| \"bad_host_node\",\n\t): FilterQueue {\n\t\tthis.query.status = status;\n\t\treturn this;\n\t}\n\n\tpageLimit(limit: number): FilterQueue {\n\t\tthis.query.limit = limit;\n\t\treturn this;\n\t}\n\n\tpageToken(pageToken: string): FilterQueue {\n\t\tthis.query.pageToken = pageToken;\n\t\treturn this;\n\t}\n\n\tprivate async fetchPage(): Promise<PinQueueResponse> {\n\t\tif (this.currentPageToken) {\n\t\t\tthis.query.pageToken = this.currentPageToken;\n\t\t}\n\t\tconst response = await queue(this.config, this.query);\n\t\tthis.currentPageToken = response.next_page_token;\n\t\treturn response;\n\t}\n\n\tsort(sort: \"ASC\" | \"DSC\"): FilterQueue {\n\t\tthis.query.sort = sort;\n\t\treturn this;\n\t}\n\n\tthen(\n\t\tonfulfilled?: ((value: PinQueueResponse) => any) | null,\n\t\tonrejected?: ((reason: any) => any) | null,\n\t): Promise<any> {\n\t\treturn queue(this.config, this.query).then(onfulfilled, onrejected);\n\t}\n\n\t// rate limit, hopefully temporary?\n\tprivate async rateLimit(): Promise<void> {\n\t\tthis.requestCount++;\n\t\tconst now = Date.now();\n\t\tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n\t\t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n\t\t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n\t\t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n\t\t\t}\n\t\t\tthis.requestCount = 0;\n\t\t}\n\t\tthis.lastRequestTime = Date.now();\n\t}\n\n\tasync *[Symbol.asyncIterator](): AsyncGenerator<PinQueueItem, void, unknown> {\n\t\twhile (true) {\n\t\t\tconst items = await this.fetchPage();\n\t\t\tfor (const item of items.jobs) {\n\t\t\t\tyield item;\n\t\t\t}\n\t\t\tif (!this.currentPageToken) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync all(): Promise<PinQueueItem[]> {\n\t\tconst allItems: PinQueueItem[] = [];\n\t\tfor await (const item of this) {\n\t\t\tallItems.push(item);\n\t\t}\n\t\treturn allItems;\n\t}\n}\n","import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\tdeleteFile,\n\tupdateFile,\n\tswapCid,\n\tswapHistory,\n\tdeleteSwap,\n\tdeletePinRequest,\n} from \"../../functions\";\nimport { getFile } from \"../../functions/files/getFile\";\nimport {\n\tPinataConfig,\n\tDeleteResponse,\n\tUpdateFileOptions,\n\tFileListItem,\n\tSwapCidOptions,\n\tSwapCidResponse,\n\tSwapHistoryOptions,\n} from \"../../types\";\nimport { FilterFiles } from \"./FilterFiles\";\nimport { FilterQueue } from \"./FilterQueue\";\n\nexport class PublicFiles {\n\tprivate config: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tlist(): FilterFiles {\n\t\treturn new FilterFiles(this.config, \"public\");\n\t}\n\n\tget(id: string): Promise<FileListItem> {\n\t\treturn getFile(this.config, id, \"public\");\n\t}\n\n\tdelete(files: string[]): Promise<DeleteResponse[]> {\n\t\treturn deleteFile(this.config, files, \"public\");\n\t}\n\n\tupdate(options: UpdateFileOptions): Promise<FileListItem> {\n\t\treturn updateFile(this.config, options, \"public\");\n\t}\n\n\taddSwap(options: SwapCidOptions): Promise<SwapCidResponse> {\n\t\treturn swapCid(this.config, options, \"public\");\n\t}\n\n\tgetSwapHistory(options: SwapHistoryOptions): Promise<SwapCidResponse[]> {\n\t\treturn swapHistory(this.config, options, \"public\");\n\t}\n\n\tdeleteSwap(cid: string): Promise<string> {\n\t\treturn deleteSwap(this.config, cid, \"public\");\n\t}\n\n\tqueue(): FilterQueue {\n\t\treturn new FilterQueue(this.config);\n\t}\n\n\tdeletePinRequest(requestId: string): Promise<string> {\n\t\treturn deletePinRequest(this.config, requestId);\n\t}\n}\n","import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\tdeleteFile,\n\tupdateFile,\n\tswapCid,\n\tswapHistory,\n\tdeleteSwap,\n\tvectorizeFile,\n\tvectorizeQuery,\n\tdeleteFileVectors,\n} from \"../../functions\";\nimport { getFile } from \"../../functions/files/getFile\";\nimport {\n\tPinataConfig,\n\tDeleteResponse,\n\tUpdateFileOptions,\n\tFileListItem,\n\tSwapCidOptions,\n\tSwapCidResponse,\n\tSwapHistoryOptions,\n\tVectorizeFileResponse,\n\tVectorizeQuery,\n\tVectorizeQueryResponse,\n\tGetCIDResponse,\n} from \"../../types\";\nimport { FilterFiles } from \"./FilterFiles\";\n\nexport class PrivateFiles {\n\tprivate config: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tlist(): FilterFiles {\n\t\treturn new FilterFiles(this.config, \"private\");\n\t}\n\n\tget(id: string): Promise<FileListItem> {\n\t\treturn getFile(this.config, id, \"private\");\n\t}\n\n\tdelete(files: string[]): Promise<DeleteResponse[]> {\n\t\treturn deleteFile(this.config, files, \"private\");\n\t}\n\n\tupdate(options: UpdateFileOptions): Promise<FileListItem> {\n\t\treturn updateFile(this.config, options, \"private\");\n\t}\n\n\taddSwap(options: SwapCidOptions): Promise<SwapCidResponse> {\n\t\treturn swapCid(this.config, options, \"private\");\n\t}\n\n\tgetSwapHistory(options: SwapHistoryOptions): Promise<SwapCidResponse[]> {\n\t\treturn swapHistory(this.config, options, \"private\");\n\t}\n\n\tdeleteSwap(cid: string): Promise<string> {\n\t\treturn deleteSwap(this.config, cid, \"private\");\n\t}\n\n\tvectorize(fileId: string): Promise<VectorizeFileResponse> {\n\t\treturn vectorizeFile(this.config, fileId);\n\t}\n\n\tqueryVectors(\n\t\toptions: VectorizeQuery,\n\t): Promise<VectorizeQueryResponse | GetCIDResponse> {\n\t\treturn vectorizeQuery(this.config, options);\n\t}\n\n\tdeleteVectors(fileId: string): Promise<VectorizeFileResponse> {\n\t\treturn deleteFileVectors(this.config, fileId);\n\t}\n}\n","import { PinataConfig } from \"../../types\";\n\nimport { formatConfig } from \"../../../utils/format-config\";\n\nimport { PublicFiles } from \"./PublicFiles\";\nimport { PrivateFiles } from \"./PrivateFiles\";\n\nexport class Files {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicFiles;\n\tprivate: PrivateFiles;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicFiles(config);\n\t\tthis.private = new PrivateFiles(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n","import type { PinataConfig, PinataMetadata, UploadOptions } from \"../../types\";\n\nexport class UploadBuilder<T> {\n\tprivate config: PinataConfig | undefined;\n\tprivate uploadFunction: (\n\t\tconfig: PinataConfig | undefined,\n\t\t...args: any[]\n\t) => Promise<T>;\n\tprivate args: any[];\n\tprivate metadata: PinataMetadata | undefined = {};\n\tprivate keys: string | undefined;\n\tprivate groupId: string | undefined;\n\tprivate vector: boolean | undefined;\n\tprivate uploadUrl: string | undefined;\n\tprivate isStreamable: boolean | undefined;\n\tprivate peerAddresses: string[] | undefined;\n\n\tconstructor(\n\t\tconfig: PinataConfig | undefined,\n\t\tuploadFunction: (\n\t\t\tconfig: PinataConfig | undefined,\n\t\t\t...args: any[]\n\t\t) => Promise<T>,\n\t\t...args: any[]\n\t) {\n\t\tthis.config = config;\n\t\tthis.uploadFunction = uploadFunction;\n\t\tthis.args = args;\n\t}\n\n\t// Replace addMetadata with these two methods:\n\tname(name: string): UploadBuilder<T> {\n\t\tif (!this.metadata) {\n\t\t\tthis.metadata = {};\n\t\t}\n\t\tthis.metadata.name = name;\n\t\treturn this;\n\t}\n\n\tkeyvalues(keyvalues: Record<string, string>): UploadBuilder<T> {\n\t\tif (!this.metadata) {\n\t\t\tthis.metadata = {};\n\t\t}\n\t\tthis.metadata.keyvalues = keyvalues;\n\t\treturn this;\n\t}\n\n\tkey(jwt: string): UploadBuilder<T> {\n\t\tthis.keys = jwt;\n\t\treturn this;\n\t}\n\n\tvectorize(): UploadBuilder<T> {\n\t\tthis.vector = true;\n\t\treturn this;\n\t}\n\n\turl(url: string): UploadBuilder<T> {\n\t\tthis.uploadUrl = url;\n\t\treturn this;\n\t}\n\n\t// cidVersion(v: 0 | 1): UploadBuilder<T> {\n\t// \tthis.version = v;\n\t// \treturn this;\n\t// }\n\n\tgroup(groupId: string): UploadBuilder<T> {\n\t\tthis.groupId = groupId;\n\t\treturn this;\n\t}\n\n\tstreamable(): UploadBuilder<T> {\n\t\tthis.isStreamable = true;\n\t\treturn this;\n\t}\n\n\tpeerAddress(peerAddresses: string[]): UploadBuilder<T> {\n\t\tthis.peerAddresses = peerAddresses;\n\t\treturn this;\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonfulfilled?:\n\t\t\t| ((value: T) => TResult1 | PromiseLike<TResult1>)\n\t\t\t| null\n\t\t\t| undefined,\n\t\tonrejected?:\n\t\t\t| ((reason: any) => TResult2 | PromiseLike<TResult2>)\n\t\t\t| null\n\t\t\t| undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\tconst options: UploadOptions = this.args[this.args.length - 1] || {};\n\t\tif (this.metadata) {\n\t\t\toptions.metadata = this.metadata;\n\t\t}\n\t\tif (this.keys) {\n\t\t\toptions.keys = this.keys;\n\t\t}\n\t\tif (this.groupId) {\n\t\t\toptions.groupId = this.groupId;\n\t\t}\n\t\tif (this.vector) {\n\t\t\toptions.vectorize = this.vector;\n\t\t}\n\t\tif (this.uploadUrl) {\n\t\t\toptions.url = this.uploadUrl;\n\t\t}\n\t\tif (this.isStreamable) {\n\t\t\toptions.streamable = this.isStreamable;\n\t\t}\n\t\tif (this.peerAddresses) {\n\t\t\toptions.peerAddresses = this.peerAddresses;\n\t\t}\n\t\tthis.args[this.args.length - 1] = options;\n\t\treturn this.uploadFunction(this.config, ...this.args).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n}\n","import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\tcreateSignedUploadURL,\n\tuploadBase64,\n\tuploadFile,\n\tuploadFileArray,\n\tuploadJson,\n\tuploadUrl,\n\tuploadCid,\n} from \"../../functions\";\nimport {\n\tFileObject,\n\tPinataConfig,\n\tSignedUploadUrlOptions,\n\tUploadOptions,\n\tUploadResponse,\n\tUploadCIDOptions,\n\tPinByCIDResponse,\n} from \"../../types\";\nimport { UploadBuilder } from \"./UploadBuilder\";\n\nexport class PublicUpload {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tfile(file: File, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, file, options) => uploadFile(config, file, \"public\", options),\n\t\t\tfile,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfileArray(\n\t\tfiles: File[],\n\t\toptions?: UploadOptions,\n\t): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, file, options) =>\n\t\t\t\tuploadFileArray(config, file, \"public\", options),\n\t\t\tfiles,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tbase64(\n\t\tbase64String: string,\n\t\toptions?: UploadOptions,\n\t): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, base64String, options) =>\n\t\t\t\tuploadBase64(config, base64String, \"public\", options),\n\t\t\tbase64String,\n\t\t\toptions,\n\t\t);\n\t}\n\n\turl(url: string, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, url, options) => uploadUrl(config, url, \"public\", options),\n\t\t\turl,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tjson(data: object, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, data, options) => uploadJson(config, data, \"public\", options),\n\t\t\tdata,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tcid(\n\t\tcid: string,\n\t\toptions?: UploadCIDOptions,\n\t): UploadBuilder<PinByCIDResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, cid, options) => uploadCid(config, cid, options),\n\t\t\tcid,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tcreateSignedURL(options: SignedUploadUrlOptions): Promise<string> {\n\t\treturn createSignedUploadURL(this.config, options, \"public\");\n\t}\n}\n","import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\tcreateSignedUploadURL,\n\tuploadBase64,\n\tuploadFile,\n\tuploadFileArray,\n\tuploadJson,\n\tuploadUrl,\n} from \"../../functions\";\nimport {\n\tFileObject,\n\tPinataConfig,\n\tSignedUploadUrlOptions,\n\tUploadOptions,\n\tUploadResponse,\n} from \"../../types\";\nimport { UploadBuilder } from \"./UploadBuilder\";\n\nexport class PrivateUpload {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tfile(file: File, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, file, options) => uploadFile(config, file, \"private\", options),\n\t\t\tfile,\n\t\t\toptions,\n\t\t);\n\t}\n\n\t// Reserved for future release\n\t// fileArray(\n\t// \tfiles: FileObject[],\n\t// \toptions?: UploadOptions,\n\t// ): UploadBuilder<UploadResponse> {\n\t// \treturn new UploadBuilder(\n\t// \t\tthis.config,\n\t// \t\t(config, file, options) =>\n\t// \t\t\tuploadFileArray(config, file, \"private\", options),\n\t// \t\tfiles,\n\t// \t\toptions,\n\t// \t);\n\t// }\n\n\tbase64(\n\t\tbase64String: string,\n\t\toptions?: UploadOptions,\n\t): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, base64String, options) =>\n\t\t\t\tuploadBase64(config, base64String, \"private\", options),\n\t\t\tbase64String,\n\t\t\toptions,\n\t\t);\n\t}\n\n\turl(url: string, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, url, options) => uploadUrl(config, url, \"private\", options),\n\t\t\turl,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tjson(data: object, options?: UploadOptions): UploadBuilder<UploadResponse> {\n\t\treturn new UploadBuilder(\n\t\t\tthis.config,\n\t\t\t(config, data, options) => uploadJson(config, data, \"private\", options),\n\t\t\tdata,\n\t\t\toptions,\n\t\t);\n\t}\n\n\tcreateSignedURL(options: SignedUploadUrlOptions): Promise<string> {\n\t\treturn createSignedUploadURL(this.config, options, \"private\");\n\t}\n}\n","import { PinataConfig } from \"../../types\";\nimport { formatConfig } from \"../../../utils/format-config\";\n\nimport { PublicUpload } from \"./PublicUpload\";\nimport { PrivateUpload } from \"./PrivateUpload\";\n\nexport class Upload {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicUpload;\n\tprivate: PrivateUpload;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicUpload(config);\n\t\tthis.private = new PrivateUpload(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n","import type {\n\tSignatureOptions,\n\tPinataConfig,\n\tSignatureResponse,\n} from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const addSignature = async (\n\tconfig: PinataConfig | undefined,\n\toptions: SignatureOptions,\n\tnetwork: \"public\" | \"private\",\n): Promise<SignatureResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tconst data = JSON.stringify({\n\t\tsignature: options.signature,\n\t\taddress: options.address,\n\t});\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/addSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/signature/${options.cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: headers,\n\t\t\t\tbody: data,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (request.status === 403) {\n\t\t\t\tthrow new PinataError(\n\t\t\t\t\t\"Unauthorized signing, you must be the original owner of the file and it must not have a signature\",\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing addSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while adding signature to CID\",\n\t\t);\n\t}\n};\n","import type { PinataConfig, SignatureResponse } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const getSignature = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\tnetwork: \"public\" | \"private\",\n): Promise<SignatureResponse> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/getSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/signature/${cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tconst res = await request.json();\n\t\treturn res.data;\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing getSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while fetching signature for CID\",\n\t\t);\n\t}\n};\n","import type { PinataConfig } from \"../../types\";\n\nimport {\n\tPinataError,\n\tNetworkError,\n\tAuthenticationError,\n\tValidationError,\n} from \"../../../utils/custom-errors\";\n\nexport const removeSignature = async (\n\tconfig: PinataConfig | undefined,\n\tcid: string,\n\tnetwork: \"public\" | \"private\",\n): Promise<string> => {\n\tif (!config) {\n\t\tthrow new ValidationError(\"Pinata configuration is missing\");\n\t}\n\n\tlet headers: Record<string, string>;\n\n\tif (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n\t\theaders = { ...config.customHeaders };\n\t} else {\n\t\theaders = {\n\t\t\tAuthorization: `Bearer ${config.pinataJwt}`,\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\tSource: \"sdk/removeSignature\",\n\t\t};\n\t}\n\n\tlet endpoint: string = \"https://api.pinata.cloud/v3\";\n\n\tif (config.endpointUrl) {\n\t\tendpoint = config.endpointUrl;\n\t}\n\n\ttry {\n\t\tconst request = await fetch(\n\t\t\t`${endpoint}/files/${network}/signature/${cid}`,\n\t\t\t{\n\t\t\t\tmethod: \"DELETE\",\n\t\t\t\theaders: headers,\n\t\t\t},\n\t\t);\n\n\t\tif (!request.ok) {\n\t\t\tconst errorData = await request.text();\n\t\t\tif (request.status === 401 || request.status === 403) {\n\t\t\t\tthrow new AuthenticationError(\n\t\t\t\t\t`Authentication failed: ${errorData}`,\n\t\t\t\t\trequest.status,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: errorData,\n\t\t\t\t\t\tcode: \"AUTH_ERROR\",\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthrow new NetworkError(`HTTP error: ${errorData}`, request.status, {\n\t\t\t\terror: errorData,\n\t\t\t\tcode: \"HTTP_ERROR\",\n\t\t\t\tmetadata: {\n\t\t\t\t\trequestUrl: request.url,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\treturn \"OK\";\n\t} catch (error) {\n\t\tif (error instanceof PinataError) {\n\t\t\tthrow error;\n\t\t}\n\t\tif (error instanceof Error) {\n\t\t\tthrow new PinataError(`Error processing addSignature: ${error.message}`);\n\t\t}\n\t\tthrow new PinataError(\n\t\t\t\"An unknown error occurred while adding signature to CID\",\n\t\t);\n\t}\n};\n","import { formatConfig } from \"../../../utils/format-config\";\nimport {\n\taddSignature,\n\tgetSignature,\n\tremoveSignature,\n} from \"../../functions/signatures\";\nimport { PinataConfig, SignatureOptions, SignatureResponse } from \"../../types\";\n\nexport class PublicSignatures {\n\tconfig: PinataConfig | undefined;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n\n\tadd(options: SignatureOptions): Promise<SignatureResponse> {\n\t\treturn addSignature(this.config, options, \"public\");\n\t}\n\n\tget(cid: string): Promise<SignatureResponse> {\n\t\treturn getSignature(this.config, cid, \"public\");\n\t}\n\n\tdelete(cid: string): Promise<string> {\n\t\treturn removeSignature(this.config, cid, \"public\");\n\t}\n}\n","import { formatConfig } from \"../../../utils/format-config\";\nimport { PinataConfig } from \"../../types\";\nimport { PrivateSignatures } from \"./PrivateSignatures\";\nimport { PublicSignatures } from \"./PublicSignatures\";\n\nexport class Signatures {\n\tconfig: PinataConfig | undefined;\n\tpublic: PublicSignatures;\n\t//private: PrivateSignatures\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.public = new PublicSignatures(config);\n\t\t// this.private = new PrivateSignatures(config)\n\t}\n\n\tupdateConfig(newConfig: PinataConfig): void {\n\t\tthis.config = newConfig;\n\t}\n}\n","import { testAuthentication } from \"./functions\";\nimport { formatConfig } from \"../utils\";\nimport {\n\tAnalytics,\n\tGroups,\n\tKeys,\n\tGateways,\n\tFiles,\n\tUpload,\n\tSignatures,\n} from \"./classes\";\nimport { PinataConfig } from \"./types\";\n\nexport class PinataSDK {\n\tconfig: PinataConfig | undefined;\n\tfiles: Files;\n\tupload: Upload;\n\tgateways: Gateways;\n\t//\tusage: Usage;\n\tkeys: Keys;\n\tgroups: Groups;\n\tanalytics: Analytics;\n\tsignatures: Signatures;\n\n\tconstructor(config?: PinataConfig) {\n\t\tthis.config = formatConfig(config);\n\t\tthis.files = new Files(this.config);\n\t\tthis.upload = new Upload(this.config);\n\t\tthis.gateways = new Gateways(this.config);\n\t\t//\t\tthis.usage = new Usage(this.config);\n\t\tthis.keys = new Keys(this.config);\n\t\tthis.groups = new Groups(this.config);\n\t\tthis.analytics = new Analytics(this.config);\n\t\tthis.signatures = new Signatures(this.config);\n\t}\n\n\tsetNewHeaders(headers: Record<string, string>): void {\n\t\tif (!this.config) {\n\t\t\tthis.config = { pinataJwt: \"\", customHeaders: {} };\n\t\t}\n\t\tthis.config.customHeaders = { ...this.config.customHeaders, ...headers };\n\n\t\t// Update headers for all sub-modules\n\t\tthis.files.updateConfig(this.config);\n\t\tthis.upload.updateConfig(this.config);\n\t\tthis.gateways.updateConfig(this.config);\n\t\t//\t\tthis.usage.updateConfig(this.config);\n\t\tthis.keys.updateConfig(this.config);\n\t\tthis.groups.updateConfig(this.config);\n\t\tthis.analytics.updateConfig(this.config);\n\t\tthis.signatures.updateConfig(this.config);\n\t}\n\n\tsetNewJwt(jwt: string): void {\n\t\tif (!this.config) {\n\t\t\tthis.config = { pinataJwt: \"\" };\n\t\t}\n\t\tthis.config.pinataJwt = jwt;\n\n\t\t// Update headers for all sub-modules\n\t\tthis.files.updateConfig(this.config);\n\t\tthis.upload.updateConfig(this.config);\n\t\tthis.gateways.updateConfig(this.config);\n\t\t//\t\tthis.usage.updateConfig(this.config);\n\t\tthis.keys.updateConfig(this.config);\n\t\tthis.groups.updateConfig(this.config);\n\t\tthis.analytics.updateConfig(this.config);\n\t\tthis.signatures.updateConfig(this.config);\n\t}\n\n\ttestAuthentication(): Promise<string> {\n\t\treturn testAuthentication(this.config);\n\t}\n}\n"],"names":["RouteKind","SpanKind","NodeNextResponse","INFINITE_CACHE","NoFallbackError","env","__NEXT_RELATIVE_PROJECT_DIR","routeModule","workUnitAsyncStorage","serverHooks","patchFetch","process","__NEXT_MULTI_ZONE_DRAFT_MODE","wait","headers","data","file","options","base64String","url","cid"],"mappings":"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","ignoreList":[0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77]}